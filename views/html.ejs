<%- include('header') -%>
<!--Content-->
<div class="jumbotron jumbotron-fluid image-slider">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">
      <div class="content-image">
        <div class="content">
          <blockquote class="blockquote">
            <h1 class="mb-2 content-header">Tôi không có tài năng gì cả. Tôi chỉ đam mê hiểu biết</h1>
            <footer class="blockquote-footer text-right text-white">Albert Einstein</footer>
          </blockquote>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="header-text text-center mt-5 ">
</div>
<div class="container mt-5" id="content-box">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">

      <hr />
      <div class="card-text text-justify">
        <article>
          <div class="row">
            <div class="col-sm-12">
              <h2 class="bg-primary mb-4 text-white rounded p-2 shadow title-article-size"><i class="fa fa-cube"
                  aria-hidden="true"></i> Phạm Vi Biến Trong Javascript</h2>
            </div>
          </div>

          <div class="article-title">
            <div class="progress-wrapper">
              <div class="progress-label"></div><progress></progress>
            </div>
          </div>
          <div class="text-content-article mt-5">
            <p><i>Hôm nay bạn hãy cùng mình đi vào tìm hiểu về phạm vi của biến cũng như cách sử dụng  khai bao biến bằng var, let và const
                trong
                ngôn
                ngữ lập trình Javascript để phát triển web nhé.</i>
            </p>
            <p>
              Điểm quan trọng khi ta <b>xác định phạm vi cho biến</b> là sẽ bảo đảm cho đoạn mã của của chúng ta được an toàn.
              Nó chỉ cho phép người dùng truy cập vào những thông tin mà chúng ta muốn thông qua việc hiển thị và phân quyền truy cập vào biến lưu trữ.
              Ngoài ra giúp chúng ta tăng khả năng nhận biết lỗi một cách dễ dàng
            </p>
            <p>
              Trong Javascript chúng ta có 3 cách khai báo biến là dùng từ khóa <b><code>let</code></b>,
              <b><code>var</code></b> và <b><code>const</code></b>. Hôm nay chúng ta sẽ đi vào tìm hiểu phạm vi biến  của mỗi cách khai báo 
              ở phần dưới đây nhé.
            </p>
         
            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Biến Toàn Cục:</h3>
              </div>
            </div>

            <p>
              <b>Biến toàn cục</b> là những biến được khai báo bên ngoài tất cả các <b>function (hàm)</b>
              hoặc bên ngoài dấu <b><code>{}</code></b>. Đối với một biến toàn cục thì bạn có thể truy cập ở 
              dữ liệu của  biến ở bất cứ đâu trong chương trình. Bây giờ chúng ta sẽ đi vào ví dụ cụ thể để hiểu rõ hơn nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let ten = "Nguyễn An";<br/> console.log(ten);<br/> function xinChao() {<br/> &nbsp;&nbsp;&nbsp;console.log("Xin Chào " + ten);<br/> }<br/> xinChao();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589858677/Pham-Vi-Bien/vi-du-bien-toan-cuc-trong-js_byh6p0.png"
              alt="Ví dụ biến toàn cục trong Javascript">

            <p class="mt-4">
              Như bạn thấy thì dù bên ngoài hay bên trong <b>function (hàm)</b> thì chúng ta đều có thể lấy được giá trị của biến <b><code>ten</code></b>.
            </p>


            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Biến  Cục Bộ:</h3>
              </div>
            </div>
            <p>
              <b>Biến cục bộ</b> là biến được đặt bên trong <b>function</b> hoặc <b><code>{}</code></b>. Chỉ có hàm chứa nó 
              mới có quyền truy cập vào dữ liệu của biến đó. Do đó bạn có thể dùng nhiều tên biến khác nhau để đặt trong những hàm khác nhau mà 
              không ảnh hưởng đến dữ liệu của biến. Bây giờ chúng ta sẽ đi vào hai dạng biến cục bộ là:
            </p>
            <h4 class="text-white bg-secondary p-2 mt-4 shadow title-article-size rounded"><b>Biến cục bộ trong function (hàm) Javascript:</b></h4>
            <p>
              Khi bạn khai báo biến trong function thì chỉ có hàm đó có thể sử dụng dữ liệu của biến đó.
              Nếu ta gọi biến bên ngoài hàm thì sẽ xảy ra lỗi. Để nắm rõ hơn bạn xem đoạn code sau nhé:  
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> function xinChao() {<br/> &nbsp;&nbsp;&nbsp;let ten = "Nguyễn An";<br/> &nbsp;&nbsp;&nbsp;console.log("Xin Chào " + ten);<br/> }<br/> xinChao();<br/> console.log(ten);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589859564/Pham-Vi-Bien/vi-du-bien-cuc-bo-trong-js_yux0ze.png"
              alt="Ví dụ biến  cục bộ  trong Javascript">
              <h4 class="text-white bg-secondary p-2 mt-4 shadow title-article-size rounded"><b>Biến cục bộ trong block statement <b><code>{}</code></b> Javascript:</b></h4>
            <p>
              Khi chúng ta khai báo biến với từ khóa <b><code>let</code></b> hay <b><code>const</code></b> trong block statement <b><code>{}</code></b> như 
              mệnh đề <b>if, switch</b>... thì chúng ta chỉ được phép truy cập biến bên trong block statement đó. Để dễ hình dung 
              bạn xem ví dụ sau đây nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> if (true) {<br/>&nbsp;&nbsp;let ten = "Nguyễn An";<br/> &nbsp;console.log("Xin Chào " + ten);<br/> }<br/> console.log(ten);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589860190/Pham-Vi-Bien/vi-du-bien-cuc-bo-voi-block-statement-trong-js_hhpofo.png"
              alt="Ví dụ biến  cục bộ với block statement  trong Javascript">
            <p class="mt-4">
              Nhưng khi chúng ta khai báo biến bằng từ khóa <b><code>var</code></b> thì nó sẽ mặc định là <b>biến toàn cục</b> và cho phép truy cập 
              dữ liệu của biến khi gọi từ bên trong và bên ngoài block statment <b><code>{}</code></b>. Để hiểu rõ hơn chúng ta 
              thử đi vào sử dùng ba cách khai báo khác nhau trong block statement để xem kết quả sao nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> if (true) {<br/>&nbsp;&nbsp;let khaiBaoLet = "Khai Báo Biến bằng let";<br/>&nbsp;&nbsp;const khaiBaoConst = "Khai Báo Biến bằng const";<br/>&nbsp;&nbsp;var khaiBaoVar = "Khai Báo Biến bằng var";<br/> }<br/> console.log(khaiBaoVar);<br/> console.log(khaiBaoConst);<br/> console.log(khaiBaoLet);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589860775/Pham-Vi-Bien/su-dung-var-let-const-block-statement-trong-js_vyx6g1.png"
              alt="Sử dụng khai báo var, let, const với block statement  trong Javascript">

            <p class="mt-4">
              Như bạn thấy thì chỉ cách khai báo <b><code>var</code></b>  mới sử dụng được dữ liệu của biến  bên ngoài block statement.
              Còn hai từ khóa <b><code>let</code></b> và <b><code>var</code></b> thì sẽ xảy ra lỗi cho chường trình.
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Phạm vi biến giữa các Function với nhau:</h3>
              </div>
            </div>
            <p>
              Bây giờ chúng ta sẽ đi vào ví dụ thực tế là sử dụng biến bên ngoài phạm vi của hàm thông qua ví dụ dưới đây nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> function luuTru() {<br/> &nbsp;&nbsp;&nbsp;let ten = "Nguyễn An";<br/> }<br/> function xinChao() {<br/>&nbsp;&nbsp;&nbsp; luuTru();<br/> &nbsp;&nbsp;&nbsp;console.log("Tên khách hàng là: " + ten);<br/> }<br/><br/>xinChao();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589862512/Pham-Vi-Bien/pham-vi-bien-giua-cac-ham-trong-js_uhvjds.png"
              alt="Phạm vi biến giữa các hàm  trong Javascript">
            <p class="mt-4">
              Như bạn thấy là mặc dù chúng ta có gọi hàm <b><code>luuTru()</code></b> trong hàm <b><code>xinChao()</code></b>
              thì nó cũng không thể lấy được giá trị lưu trữ trong biến <b><code>ten</code></b>.
            </p>
            <p>
              Bây giờ chúng ta thử khai báo bằng từ khóa <b><code>var</code></b> để xem có thể lấy được dữ liệu của biến <b><code>ten</code></b> không nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> function luuTru() {<br/> &nbsp;&nbsp;&nbsp;var ten = "Nguyễn An";<br/> }<br/> function xinChao() {<br/>&nbsp;&nbsp;&nbsp; luuTru();<br/> &nbsp;&nbsp;&nbsp;console.log("Tên khách hàng là: " + ten);<br/> }<br/><br/>xinChao();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589863324/Pham-Vi-Bien/pham-vi-bien-giua-cac-ham-khai-bao-var-trong-js_mbgd1m.png"
              alt="Phạm vi biến giữa các hàm khai báo bằng var trong Javascript">

            <p class="mt-4">
              Như vậy chúng ta có thể rút ra kết luận là đối với phạm vi <b> biến được khai báo trong hàm</b> thì 
              việc sử dụng từ khóa <b><code>let</code></b>, <b><code>const</code></b> hay <b><code>var</code></b>
             cũng sẽ không có quyền truy cập vào dữ liệu của biến đó ở <b>bên ngoài</b> hàm chứa nó.
            </p>
            <p>
              Nhưng có một cách giúp chúng ta giải quyết vần đề trên là <b>không sử dụng từ khóa để khai báo biến</b>.
              Lúc này phạm vi của biến sẽ là biến toàn cục và chúng ta có thể truy cập dữ liệu của biến ở mọi nơi 
              trong chương trình. Để dễ hình dung bạn xem đoạn code sau nhé:
            </p>

            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> function luuTru() {<br/> &nbsp;&nbsp;&nbsp; ten = "Nguyễn An";<br/> }<br/> function xinChao() {<br/>&nbsp;&nbsp;&nbsp; luuTru();<br/> &nbsp;&nbsp;&nbsp;console.log("Tên khách hàng là: " + ten);<br/> }<br/><br/>xinChao();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589863755/Pham-Vi-Bien/pham-vi-bien-giua-cac-ham-khong-khai-bao-bien-trong-js_fbqrjv.png"
              alt="Phạm vi biến giữa các hàm khi không sử dụng từ khóa khai báo trong Javascript">

            <p class="mt-4">
              Cách này mình khuyên chỉ sử dụng trong trường hợp cần thiết thôi nhé nếu không sẽ gây ra sự lộn xộn 
              và dễ hiểu lầm phạm vi của biến trong đoạn code của chúng ta.
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Lexical Scope</h3>
              </div>
            </div>
            <p>
              <b>Lexical Scope</b> là việc sử dụng các hàm lồng vào nhau. Và hàm con sẽ có quyền truy cập 
              các biến của hàm cha nhưng hàm cha sẽ <b>không</b> có quyền truy cập và sử dụng  các biến của hàm con.
              Để dễ hiểu thì chúng ta sẽ đi vào ví dụ thực tế sau đây nhé:
            </p>


            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> function hamCha () {<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let bienCha = "Tôi là biến Cha";<br/><br/> &nbsp;&nbsp;function hamCon() {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; let bienCon = "Tôi là biến Con";<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(bienCha);<br/> &nbsp;&nbsp;}<br/><br/> &nbsp;&nbsp;console.log(bienCon);<br/> }<br/> hamCha();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589875636/Pham-Vi-Bien/Lexical-Scope-trong-js_jaer08.png"
              alt="Lexical Scope trong Javascript">
            <p class="mt-4">
              Như bạn thấy thì khi chúng ta dùng <b><code>bienCha</code></b> trong <b><code>hamCon</code></b> thì sẽ được cho phép còn ngược lại nếu chúng ta truy cập <b><code>bienCon</code></b>
              bên ngoài hàm của nó thì sẽ xảy ra lỗi như trên.
            </p>
            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Closures</h3>
              </div>
            </div>
            <p>
             Như ví dụ trên khi ta tạo một <b><code>hamCon</code></b> nằm bên trong <b><code>hamCha</code></b>
             thì lúc này chúng ta cũng đã tạo một <b>clouser</b>. Với <b><code>hamCon</code></b> chính là <b>clouser</b>.
             Và clouser này sẽ được quyền truy cập biến của hàm cha dù hàm đó có được trả về  hay không. Điều này giúp nó duy trì 
             quyền truy cập vào dữ liệu của các biến ở hàm cha. Nghe hơi khó hiểu nhỉ, bây giờ chúng ta sẽ đi vào ví dụ cụ thể sau đây nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> function hamCha () {<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let bienCha = "Tôi là biến Cha";<br/><br/> &nbsp;&nbsp;function hamCon() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(bienCha);<br/> &nbsp;&nbsp;}<br/><br/> return hamCon;<br/> }<br/> hamCha()();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589877996/Pham-Vi-Bien/Clouser-trong-js_lbrgey.png"
              alt="Clouser trong Javascript">
            <p class="mt-4">
              Đây là cách mà chúng ta khi muốn gọi và sử dụng <b><code>hamCon</code></b> trong hai hàm lồng vào nhau.
              Cái này mình sẽ có một bài giải thích kỹ hơn khi chúng ta học về cách tương tác với trình duyệt trong javascript nhé.
              Nếu bạn muốn tìm hiểu hay tham khảo thêm thì xem ở đây nha <a href="https://developer.mozilla.org/vi/docs/Web/JavaScript/Closures" title="clouser">Clouser</a>.
            </p>

















            <h4 class="mt-4"> <b><i class="fa fa-tasks" aria-hidden="true"></i> Tổng kết: </b></h4>

            
            <p>Qua đây mình mong bài viết sẽ giúp bạn hiểu được <b>phạm vi biến</b>
              trong ngôn ngữ
              Javascript và
              nếu có thắc mắc gì cứ gửi email mình sẽ phản hồi sớm nhất có thể. Rất
              mong bạn tiếp tục ủng
              hộ trang web để mình có thể viết nhiều bài hay hơn nữa nhé. Chúc bạn có một ngày vui vẻ!</p>

          </div>
        </article>
      </div>
    </div>




    <div class="mb-5"></div>
  </div>
  <div class="col-lg-12 col-md-12 col-xs-12">
    <div class="mt-5"></div>
    <div class="card card-search">
      <div class="card-header card-header-category">
        Từ Khóa
      </div>
      <div class="card-body card-body-search mt-4">
        <h3 class="button-article"><a href="/article/css"><button type="button"
              class="CSS btn shadow-sm rounded btn-success m-2 pl-3 pr-3">CSS</button></a>
          <a href="/article/html"><button type="button"
              class="HTML btn shadow-sm rounded btn-success m-2 pl-3 pr-3">HTML</button></a>
          <a href="/article/nodejs">
            <button type="button" class="btn shadow-sm rounded btn-success m-2 pl-3 pr-3">NodeJS</button></a>
        </h3>
      </div>
    </div>


  </div>
</div>
</div>

<script src='/javascripts/highlight.pack.js'></script>
<script>
  hljs.initHighlightingOnLoad();
</script>
<script>
  $(document).ready(function () {
    const win = $(window);
    const doc = $(document);
    const progressBar = $('progress');
    const progressLabel = $('.progress-label');
    const setValue = () => win.scrollTop();
    const setMax = () => doc.height() - win.height();
    const setPercent = () => Math.round(win.scrollTop() / (doc.height() - win.height()) * 100);

    progressLabel.text(setPercent() + '%');
    progressBar.attr({
      value: setValue(),
      max: setMax()
    });

    doc.on('scroll', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue()
      });
    });

    win.on('resize', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue(),
        max: setMax()
      });
    })
  });
</script>
<script>
  var container = document.getElementById('content-box');

  $(window).on('load resize', (function () {
    windowsize = $(window).width();

    if ((windowsize <= 992) && (screen.height >= 768)) {
      container.classList.remove('container');
      container.classList.add('container-fluid')

      //navbar
      $('.nav-item').addClass('hvr-underline-from-left')
    } else {
      container.classList.add('container');
      container.classList.remove('container-fluid')

      //navbar
      $('.nav-item').removeClass('hvr-underline-from-left')
    }
  }));
</script>
<script src="/javascripts/lazysizes.min.js" async></script>
<%- include('footer') -%>