<%- include('header') -%>
<!--Content-->
<div class="jumbotron jumbotron-fluid image-slider">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">
      <div class="content-image">
        <div class="content">
          <blockquote class="blockquote">
            <h1 class="mb-2 content-header">Tôi không có tài năng gì cả. Tôi chỉ đam mê hiểu biết</h1>
            <footer class="blockquote-footer text-right text-white">Albert Einstein</footer>
          </blockquote>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="header-text text-center mt-5 ">
</div>
<div class="container mt-5" id="content-box">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">

      <hr />
      <div class="card-text text-justify">
        <article>
          <div class="row">
            <div class="col-sm-12">
              <h2 class="bg-primary mb-4 text-white rounded p-2 shadow title-article-size"><i class="fa fa-cube"
                  aria-hidden="true"></i> Tìm Hiểu Prototype Trong Javascript</h2>
            </div>
          </div>

          <div class="article-title">
            <div class="progress-wrapper">
              <div class="progress-label"></div><progress></progress>
            </div>
          </div>
          <div class="text-content-article mt-5">
            <p><i>Hôm nay bạn hãy cùng mình đi vào tìm hiểu về khái niệm cũng như cách sử dụng prototype
                trong
                ngôn
                ngữ lập trình Javascript để phát triển web nhé.</i>
            </p>
            <p>
              <b>Prototype Javascript</b> là một trong những khái niệm cực kỳ quan trọng mà bạn cần phải nắm khi học về
              ngôn ngữ
              lập trình Javascript. Nó là <b>prototype-based language</b>(ngôn ngữ dựa trên nguyên mẫu) cho phép chia sẻ
              các thuộc tính và phương thức của một
              object thông qua một đối tượng tổng quát có khả năng nhân bản và mở rộng.

            </p>
            <p>
              Nếu cảm thấy khó hiểu thì bạn có thể tìm hiểu thêm về <b>prototype-based language</b> <a
                href="https://vi.wikipedia.org/wiki/L%E1%BA%ADp_tr%C3%ACnh_d%E1%BB%B1a_tr%C3%AAn_nguy%C3%AAn_m%E1%BA%ABu"
                title="prototype-based language">ở đây nhé</a>.
            </p>
            <p>
              Và mình có lưu ý trước khi ta đi vào tìm hiểu về bài này, bạn cần nắm vững về khái niệm và cách sử dụng
              <b>object</b>
              trong javascript đã nhé. Nếu bạn muốn tham khảo hay xem lại về object thì nhấn <a
                href="https://www.niemvuilaptrinh.com/article/Object-Trong-Javascript" title="Object trong javascript">ở
                đây nha</a>.
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Prototype Trong Javascript</h3>
              </div>
            </div>
            <p>
              Trong javascript thì tất cả các object đều có <b>prototype</b>. Và các object đó sẽ kế thừa thuộc tính
              cũng như phương thức từ <b>prototype</b> của nó. Ví dụ như là :
              <ul>
                <li>
                  Một object được tạo bằng <b><code>new Date()</code></b> thì nó sẽ kế thừa từ <b>Date.prototype</b>.
                </li>
                <li>
                  Một array được tạo bằng <b><code>new Array()</code></b> thì nó sẽ kế thừa từ <b>Array.prototype</b>.
                </li>
                <li>
                  Một object khachHang sẽ kế thừa từ <b>khachHang.prototype</b>.
                </li>
              </ul>
            </p>
            <p>
              Nhưng tất cả các object đó (Date, Array, Function...) thì đều được kế thừa từ <b>Object.prototype</b>. Để
              hiểu
              rõ hơn bạn xem hình ảnh bên dưới nhé:
            </p>
            <img class=" lazyload" height="300"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590114853/Javascript-prototype/javascript-prototype_dyv9of.svg"
              alt="Object.prototype trong javascript">
            <p>
              Trong javascript, Các object(đối tượng) có một thuộc tính ẩn nội bộ là <b><code>[[Prototype]]</code></b>
              với giá trị là <b><code>null</code></b> hoặc <b>tham chiếu đến một đối tượng khác</b>. Lúc này các đối
              tượng được tham chiếu sẽ gọi là <b>prototype(nguyên mẫu)</b>.<br /><br />

              Khi chúng ta muốn lấy một thuộc tính nào đó trong <b>object</b> nhưng  nếu nó <b>không có</b> trong object đó thì
              javascript sẽ tự động lấy nó từ <b>prototype</b>. Cách thức hoạt động này sẽ được gọi là <b>prototypal
                inheritance</b>
              (kế thừa nguyên mẫu).<br /><br />
              Để dễ hình dung thì bạn có thể tưởng tượng <b>prototype</b> là một lớp cha và <b>kế thừa nguyên mẫu</b> sẽ
              là phương thức cho phép
              thằng con lấy và sử dụng các thuộc tính được thừa hưởng từ thằng cha.
            </p>
            <p>
              Vậy làm sao chúng ta có thể thiết lập <b>prototype</b> cho một object và đọc thuộc tính từ nó?
            </p>
            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size"><b>Sử dụng __proto__</b></h3>
              </div>
            </div>
       
            <p>
              Đây là thuộc tính giúp chúng ta có thể truy cập và thiết lập <b><code>[[prototype]]</code></b> cho một đối
              tượng nào đó.<br />

              Thuộc tính này không phải là một tiện ích ở trong javascript đâu nhé mà nó được cung cấp bởi trình duyệt
              mà chúng ta đang sử dụng.
              Nhưng bạn cũng đừng quá lo lắng vì các trình duyệt phổ biến hiện tại thì đều hỗ trợ thuộc tính
              <b><code>__proto__</code></b>.
              <br />
              Bây giờ chúng ta sẽ cùng nhau đi vào ví dụ cụ thể để dễ hình dung hơn nhé:
            </p>

            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> &nbsp;let&nbsp;dongVat&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;an&nbsp;:&nbsp;true<br/> &nbsp;};<br/> &nbsp;let&nbsp;meo&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;chay:&nbsp;true<br/> &nbsp;};<br/>&nbsp;meo.__proto__&nbsp;=&nbsp;dongVat;<br/> &nbsp;<br/> &nbsp;console.log(meo.an);<br/> &nbsp;console.log(meo.chay);<br/></code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590120012/Javascript-prototype/__proto__-trong-javascript_evysvn.png"
              alt="__proto__ trong javascript">
            <p class="mt-4">
              Ở đây mình chọn động vật là thằng cha, mèo sẽ là thằng con. Vậy để <b>kế thừa thuộc tính của thằng cha</b>
              thì chúng ta sử dụng đoạn code như trên là:<br />
              <b><code>meo.__proto__ = dongVat;</code></b>

              <br />
              Lúc này phương thức kế thừa nguyên mẫu sẽ hoạt động như sau:
              <ul>
                <li>Khi chúng ta gọi <b><code>meo.an</code></b> thì javascrip sẽ tìm trong đối tượng <b>meo</b> có thuộc
                  tính <b><code>an</code></b> hay không.</li>
                <li>Nếu không có, thì javascrip sẽ tiếp tục tham chiếu đến <b><code>[[prototype]]</code></b> mà bây giờ
                  chính là đối tượng <b><code>dongVat</code></b>.</li>
                <li>Nó tiếp tục tìm trong đối tượng <b><code>dongVat</code></b> nếu thấy thuộc tính <b><code>an</code>
                    thì trả về kết quả.</b></li>
              </ul>
              Bạn có thể xem hình bên dưới để hiểu rõ hơn nhé:
            </p>
            <div class="row">
              <div class="col-md-4 col-sm-12">
                <img class=" lazyload" width="100"
                  data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590133095/Javascript-prototype/prototype-in-javascript_ot1xr4.svg"
                  alt="Ví dụ __proto__ trong prototype javascript">
              </div>
            </div>


            <p class="mt-4">
              Ở đây chúng ta  có thể nói là <b>dongVat</b> sẽ là một <b>prototype(nguyên mẫu)</b> của <b>meo</b> hay
              <b>meo</b> là kế thừa nguyên mẫu từ <b>dongVat</b>.<br/>
              Không những chúng ta có thể sử dụng thuộc tính mà còn thừa kế <b>phương thức từ prototype</b> nữa.
              Để hiểu rõ hơn bạn xem đoạn code sau nhé:
            </p>

            <!--433089-->

            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> &nbsp;let&nbsp;dongVat&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;an&nbsp;:&nbsp;true,<br/> &nbsp;&nbsp;&nbsp;uongNuoc() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log("Động vật uống nước");<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/> &nbsp;};<br/> &nbsp;let&nbsp;meo&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;chay:&nbsp;true<br/> &nbsp;};<br/>&nbsp;meo.__proto__&nbsp;=&nbsp;dongVat;<br/> &nbsp;<br/>&nbsp;meo.uongNuoc();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590134016/Javascript-prototype/ke-thua-phuong-thuc-proto_dcfbx5.png"
              alt="Kế thừa phương thức bằng __proto__ trong javascript">

            <p class="mt-4">
              Như bạn thấy là javascript sẽ tự động tìm kiếm phương thức từ <b>prototype</b> nếu phương thức đó không tồn tại trong object <b><code>meo</code></b>.
              Để hiểu rõ hơn bạn xem hình ảnh dưới đây  nhé:
            </p>
            <div class="row">
              <div class="col-md-4 col-sm-12">
                <img class=" lazyload" width="100"
                  data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590134434/Javascript-prototype/lay-phuong-thuc-tu-prototype_wxd2xx.svg"
                  alt="Lấy phương thức bằng __proto__ trong prototype javascript">
              </div>
            </div>
            
            <p>
              Mình có lưu ý nhỏ là <b>prototype</b> chỉ cho phép chúng ta đọc thuộc tính. Do đó nếu bạn muốn <b>xác định 
             lại một phương thức nào đó</b> cho đối tượng kế thừa thì chúng ta có thể gán trực tiếp vào trong object đó.
             Để hiểu rõ hơn bạn xem đoạn code sau đây nhé:
            </p>
           
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> &nbsp;let&nbsp;dongVat&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;an&nbsp;:&nbsp;true,<br/> &nbsp;&nbsp;&nbsp;uongNuoc() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log("Động vật uống nước");<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/> &nbsp;};<br/> &nbsp;let&nbsp;meo&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;chay:&nbsp;true<br/> &nbsp;};<br/>&nbsp;meo.__proto__&nbsp;=&nbsp;dongVat;<br/> meo.uongNuoc = function() {<br/> &nbsp;&nbsp;console.log("Mèo uống nước!");<br/> };<br/>&nbsp;meo.uongNuoc();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590137549/Javascript-prototype/xac-dinh-lai-phuong-thuc-proto_p7b7yg.png"
              alt="Xác định lại phương thức bằng __proto__ trong javascript">
            <p class="mt-4">
              Như bạn thấy thì khi chúng ta gọi <b><code> meo.uongNuoc();</code></b> thì nó sẽ tìm phương thức đó trong đối tượng <b><code>meo</code></b>
              và thực hiện ngay lập tức.<br/>
              Chỉ khi nào nó không tìm thấy phương thức trong đối tượng <b><code>meo</code></b> thì lúc đó  javascript mới sử dụng đến  <b>prototype</b>.
            </p>

            <div class="row">
              <div class="col-md-4 col-sm-12">
                <img class=" lazyload" width="100"
                  data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590138356/Javascript-prototype/xac-dinh-lai-phuong-thuc-trong-prototype_r2yxp0.svg"
                  alt="Xác định lại phương thức bằng __proto__ trong prototype javascript">
              </div>
            </div>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mt-4 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Sử Dụng Giá Trị <code>this</code> Trong Prototype</h3>
              </div>
            </div>
            <p>
              Khi bạn có một object cha chứa nhiều phương thức, thuộc tính và được kế thừa bởi nhiều object con thì 
              các phương thức trong object cha phải được viết dạng tổng quát để có thể được sử dụng cho nhiều object con.<br/>
              Ví dụ bạn có một mô hình kế thừa như sau:
            </p>

            <div class="row">
              <div class="col-md-8 col-sm-12">
                <img class=" lazyload"
                  data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590139575/Javascript-prototype/vi-du-minh-hoa-this-prototype_ntre2e.svg"
                  alt="Xác định lại phương thức bằng __proto__ trong prototype javascript">
              </div>
            </div>
            <p>
              Vậy cứ mỗi khi có một object con mới thì chúng ta <b>phải xác định lại</b> phương thức <b><code>an</code></b> để phù hợp với object đó.
              Trong thực tế thì cách này rất ít khi được sử dụng vì nó sẽ gây ra sự cồng kềnh khó hiểu cho đoạn mã cũng như gây lãng phí thời gian,
              công sức của bạn.
            </p>
            <p>
              Để giải quyết vấn đề trên thì bạn có thể sử dụng từ khóa <b><code>this</code></b>. Nó giúp chúng ta ghi hàm một cách tổng quát và 
              có thể gọi cho bất kỳ object con nào. Bây giờ chúng ta thử đi vào ví dụ để hiểu rõ hơn nhé:
            </p>  

           
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> &nbsp;let&nbsp;dongVat&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;ten:&nbsp;"Động Vật",<br/> &nbsp;&nbsp;&nbsp;uongNuoc() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(this.ten + " đang uống nước");<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/> &nbsp;};<br/> &nbsp;let&nbsp;meo&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;ten:&nbsp;"Mèo"<br/> &nbsp;};<br/> &nbsp;let&nbsp;cho&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;ten:&nbsp;"Chó"<br/> &nbsp;};<br/>&nbsp;meo.__proto__&nbsp;=&nbsp;dongVat;<br/>&nbsp;cho.__proto__&nbsp;=&nbsp;dongVat;<br/><br/> meo.uongNuoc();/*Mèo đang uống nước*/<br/> cho.uongNuoc();/*Chó đang uống nước*/</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590146284/Javascript-prototype/ke-thua-phuong-thuc-trong-prototype_fkrjrk.png"
              alt="Kế thừa  phương thức btrong prototype javascript">
            <p class="mt-4">
              Như bạn thấy thì các object <b><code>meo</code></b> và <b><code>cho</code></b> có thể sử dụng phương thức chung của <b><code>dongVat</code></b>
              mà không cần phải định nghĩa lại phương thức cho những object con đó. Khi bạn thêm các object khác như <b><code>chim</code></b>, <b><code>khi</code></b>... thì chúng ta đều sử dụng lại được phương thức <b><code>uongNuoc</code></b> trong
              <b><code>dongVat</code></b>.
            </p>


            <div class="row">
              <div class="col-sm-12 bg-light p-2 mt-4 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Sử Dụng Vòng Lặp <code>for...of</code> Để Lấy Thuộc Tính</h3>
              </div>
            </div>
            <p>
              Khi bạn cần lặp qua các thuộc tính ở trong object con và những object mà nó được kế thừa thì chúng ta có 
              thể sử dụng vòng lặp <b><code>for...of</code></b>. Để nắm rõ hơn bạn xem đoạn code sau nhé:
            </p>

            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> &nbsp;let&nbsp;dongVat&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;an&nbsp;:&nbsp;true<br/> &nbsp;};<br/> &nbsp;let&nbsp;meo&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;chay:&nbsp;true<br/> &nbsp;};<br/>&nbsp;meo.__proto__&nbsp;=&nbsp;dongVat;<br/> &nbsp;<br/> for(let thuocTinh in meo) console.log(thuocTinh);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590147180/Javascript-prototype/for-of-lay-thuoc-tinh-trong-object_psxszo.png"
              alt="for...of lấy thuộc tính trong object javascript">
            <p class="mt-4">
              Nếu như bạn muốn lấy <b>thuộc tính object con đó sở hữu</b> thì có thể sử dụng phương thức <b><code>Object.keys()</code></b>.
              Để hiểu rõ hơn chúng ta cùng đi vào ví dụ cụ thể sau đây nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> &nbsp;let&nbsp;dongVat&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;an&nbsp;:&nbsp;true<br/> &nbsp;};<br/> &nbsp;let&nbsp;meo&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;chay:&nbsp;true<br/> &nbsp;};<br/>&nbsp;meo.__proto__&nbsp;=&nbsp;dongVat;<br/> &nbsp;<br/> console.log(Object.keys(meo));</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590147685/Javascript-prototype/su-dung-Object.keys_erxkjx.png"
              alt="Sử dụng Object.keys() trong object javascript">




              <div class="row">
                <div class="col-sm-12 bg-light p-2 mt-4 mb-4 shadow rounded-pill">
                  <h3 class="text-primary ml-4 title-article-size">Thuộc Tính Prototype Trong Function Javascript</h3>
                </div>
              </div>
              <p>
                Trước khi javascript cho phép chúng ta thiết lập <b>prototype</b> bằng <b><code>__proto__</code></b>. Thì ngày xưa 
                ta có một cách khác để thiết lập là sử dụng thuộc tính <b>"prototype"</b> của <b>constructor function</b>.
                Mục đích của mình khi nói về phần này là giúp bạn có thể hiểu và sử dụng khi lỡ gặp nó trong quá trình lập trình.
              </p>
              <p>
                Trước khi đi vào vấn đề chính thì bạn cần hiểu  và sử dụng được <b>constructor function</b> đã nhé. Nếu bạn muốn xem lại hay tham khảo 
                thêm thì nhấn <a href="https://www.niemvuilaptrinh.com/article/Constructor-Function-Trong-Javascript" title="constructor function">vào đây nha</a>.
              </p>

              <p>
                Bây giờ chúng ta sẽ đi vào ví dụ cụ thể để dễ hình dung hơn nhé:
              </p>

            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> &nbsp;let&nbsp;dongVat=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;an:&nbsp;true<br/> &nbsp;};<br/>&nbsp;function&nbsp;Meo(ten)&nbsp;{<br/> &nbsp;&nbsp;&nbsp;this.ten&nbsp;=&nbsp;ten;<br/> &nbsp;}<br/><br/>&nbsp;Meo.prototype&nbsp;=&nbsp;dongVat;<br/> /*Cách gán phía dưới bằng với phương thức meo.__proto__ = dongVat*/ <br/>&nbsp;let&nbsp;meo&nbsp;=&nbsp;new&nbsp;Meo("Mèo&nbsp;Đen");<br/>&nbsp;console.log(meo.an);<br/> console.log(meo.ten);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590149958/Javascript-prototype/constructor-function-prototype-javascript_uzlwm3.png"
              alt="Constructor function prototype javascript">
              <p>
                Mình có lưu ý là  chỉ khi <b>(Function).prototype</b> là một object thì chúng ta mới có thể sử dụng từ khóa <b><code>new</code></b> để thiết lập <b><code>[[Prototype]]</code></b>
                đến cho một đối tượng mới. Như ví dụ trên là chúng ta gán <b><code>Meo.prototype = dongVat</code></b>. Thì tất cả các đối tượng được tạo từ hàm <b><code>Meo</code></b>
                sẽ thừa hưởng được các thuộc tính và phương thức của <b><code>dongVat</code></b>. Và để dễ hình dung hơn bạn xem hình ảnh sau nhé:
              </p>

            <div class="row">
              <div class="col-md-8 col-sm-12">
                <img class=" lazyload"
                  data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590151606/Javascript-prototype/hinh-anh-minh-hoa-prototype-function_jlxuue.svg"
                  alt="Hình ảnh minh họa về prototype function javascript">
              </div>
            </div>
           

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 mt-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Prototype Mặc Định Trong Function Javascript</h3>
              </div>
            </div>
            <p>
              Tất cả các function trong javascript đều có thuộc tính <b><code>prototype</code></b> mặc định được định nghĩa sẵn dù chúng ta 
              có thiết lập cho nó hay không.<br/>
               Thuộc tính <b><code>prototype</code></b> mặc định này là một object. Nó chỉ có một thuộc tính là <b>constructor</b> để trỏ về lại hàm của nó.
               Để hiểu rõ hơn bạn xem đoạn code sau nhé:
            </p>
           

            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> function Meo() {}<br/> /*prototype mặc định*/<br/> /*Meo.prototype = {constructor: Meo};*/ <br/><br/> console.log(Meo.prototype.constructor == Meo)</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590154441/Javascript-prototype/prototype-constructor-function-javascript_ogbese.png"
              alt="prototype.constructor trong function javascript">

            <p class="mt-4">
              Để dễ hình dung bạn xem hình ảnh miêu tả ở dưới đây nhé:
            </p>
         <div class="row">
                <div class="col-md-10 col-sm-12">
                  <img class=" lazyload"
                    data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590154965/Javascript-prototype/prototype-constructor-function_h27stk.svg"
                    alt="prototype constructor function javascript">
                </div>
              </div>


              <p class="mt-4">
                Và khi chúng ta tạo một <b>object</b>  bằng function (hàm) với từ khóa <b><code>new</code></b> thì tất cả các object đó 
                đều kế thừa thuộc tính <b><code>constructor</code></b> thông qua  <b><code>[[Prototype]]</code></b>. Để hiểu rõ hơn bạn xem đoạn code sau đây nhé:
              </p>
              <p>
                <mark class="p-1"><b>Đoạn Code:</b></mark>
              </p>
              <pre><code class="javascript"> function Meo() {}<br/> /*prototype mặc định*/<br/> /*Meo.prototype = {constructor: Meo};*/ <br/><br/> let meoDen = new Meo();<br/> console.log(meoDen.constructor == Meo);</code></pre>
              <p class="mt-4">
                <mark class="p-1"><b>Kết Quả:</b></mark>
              </p>
              <img class="img-thumbnail img-fluid shadow p-2 lazyload"
                data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590155880/Javascript-prototype/vi-du-prototype-constructor-function-javascript_ylarfc.png"
                alt=" Ví dụ prototype.constructor trong function javascript">

              <p class="mt-4">
                Để dễ hiểu hơn bạn xem hình ảnh miêu tả dưới đây nhé:
              </p>
              <div class="row">
                <div class="col-md-10 col-sm-12">
                  <img class=" lazyload"
                    data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590156175/Javascript-prototype/V%C3%AD_d%E1%BB%A5_prototype.constructor-2_icuuc9.svg"
                    alt="prototype constructor function 2 javascript">
                </div>
              </div>



              <div class="row">
                <div class="col-sm-12 bg-light p-2 mt-4 mb-4 shadow rounded-pill">
                  <h3 class="text-primary ml-4 title-article-size"> Object.prototype Trong Javascript</h3>
                </div>
              </div>
              <p>
                Như bạn đã biết thì tất cả các object trong javascript đều tham chiếu đến <b>Object.prototype</b>.
               Phần này chúng ta sẽ đi vào tìm hiểu <b>Object.prototype</b> có những gì nhé.
              </p>
              <p>
                Để xem được <b>Object.prototype</b> thì đơn giản bạn chỉ cần tạo một object trong Javascript
                như  đoạn code sau đây:
              </p>

              <p>
                <mark class="p-1"><b>Đoạn Code:</b></mark>
              </p>
              <pre><code class="javascript"> let doiTuong = {}; <br/> console.log(doiTuong);</code></pre>
              <p class="mt-4">
                <mark class="p-1"><b>Kết Quả:</b></mark>
              </p>
              <img class="img-thumbnail img-fluid shadow p-2 lazyload"
                data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590158283/Javascript-prototype/xem-object-prototype-javascript_unovcq.png"
                alt="Xem Object.prototype trong  javascript">
              <p class="mt-4">
                Để thấy được <b><code>Object.prototype()</code></b> thì bạn nhấn vào dấu mũi tên  trong console ở google developer để hiển thị các phương thức, thuộc tính của nó nhé.
                <br/>
                Như ví dụ trên ta có thể thấy nó có các thuộc tính như là <b><code>toString()</code></b>, <b><code>valueOf()</code></b>...
                và cũng có thuộc tính tên <b><code>constructor</code></b> để trỏ về hàm <b><code>Object()</code></b>.
                Khi việc tạo mới một đối tượng bằng <b><code>new Object()</code></b> hay <b><code>{}</code></b> 
                thì <b><code>[[prototype]]</code></b> sẽ được thiết  lập và tham chiếu đến  <b><code>Object.prototype()</code></b>. Do đó  
                object <b><code>doiTuong</code></b> có thể sử dụng các phương thức từ <b><code>Object.prototype()</code></b>.
                <br/>Để dễ hình dung bạn xem hình ảnh sau đây nhé:
              </p>

              <div class="row">
                <div class="col-md-10 col-sm-12">
                  <img class=" lazyload"
                    data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590160947/Javascript-prototype/minh-hoa-Object-prototype_qlrumo.svg"
                    alt="Minh họa Object.prototype">
                </div>
              </div>
              <p class="mt-4">
                Bây giờ chúng ta thử gọi  thuộc tính <b><code>toString()</code></b> được lấy từ <b><code>Object.prototype</code></b>
                bằng đoạn code dưới đây nhé:
              </p>

              <p>
                <mark class="p-1"><b>Đoạn Code:</b></mark>
              </p>
              <pre><code class="javascript"> let doiTuong = {}; <br/> console.log(doiTuong.toString());<br/> console.log(typeof doiTuong.toString());</code></pre>
              <p class="mt-4">
                <mark class="p-1"><b>Kết Quả:</b></mark>
              </p>
              <img class="img-thumbnail img-fluid shadow p-2 lazyload"
                data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590197852/Javascript-prototype/toString-Object-prototype_rn5qed.png"
                alt="Phuong thức toString() Object.prototype trong  javascript">
              <p class="mt-4">
                Đối với <b><code>Object.prototype</code></b> thì nó sẽ không có <b><code>[[Prototype]]</code></b>
                nào nữa. Bạn có thể hình dung như sau,  nó là đối tượng lớn nhất trong javascript  và chỉ có các object khác kế thừa từ nó chứ nó 
                không kế thừa bất cứ đối tượng nào trong Javascript. Bây giờ để bạn hiểu rõ hơn thì chúng ta sẽ sử dụng <b><code>__proto__</code></b> 
                để kiểm tra thử nhé:
              </p>
              <p>
                <mark class="p-1"><b>Đoạn Code:</b></mark>
              </p>
              <pre><code class="javascript">console.log(Object.prototype.__proto__); //Kết quả sẽ là null</code></pre>
              <p class="mt-4">
                <mark class="p-1"><b>Kết Quả:</b></mark>
              </p>
              <img class="img-thumbnail img-fluid shadow p-2 lazyload"
                data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590199079/Javascript-prototype/check-Object-prototype-bang-proto_zg5gm6.png"
                alt="Kiểm tra Object.prototype bằng __proto__">


                <div class="row">
                  <div class="col-sm-12 bg-light p-2 mt-4 mb-4 shadow rounded-pill">
                    <h3 class="text-primary ml-4 title-article-size"> Tại Sao Mọi Thứ Đều Kế Thừa Từ Object?</h3>
                  </div>
                </div>
                <p>
                  Phần này mình sẽ giúp bạn trả lời câu hỏi <b>tại sao mọi thứ đều kế thừa từ object</b> trong ngôn ngữ lập trình javascript.
                  Khi bạn tạo một <b><code>mảng (array)</code></b>, <b><code>ngày (date)</code></b>, <b><code>hàm (function)</code></b> hay các đối tượng khác 
                  thì các phương thức sẽ được giữ trong prototype tương ứng của nó.
                </p>
                <p>
                  Nghĩa là khi bạn tạo một mảng với phần tử là <b><code>[1, 2, 3]</code></b> thì mặc định javascript sẽ tự động thiết lập 
                  <b><code>new Array()</code></b> để lưu giữ các phương thức trong <b><code>Array.prototype</code></b>.
                  Để dễ hình dung bạn xem hình ảnh sau đây sẽ rõ nhé:
                </p>

                <div class="row">
                  <div class="col-md-10 col-sm-12">
                    <img class=" lazyload" width="100"
                      data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590201678/Javascript-prototype/vi-du-minh-hoa-cap-bac-prototype-js_sqnaqd.svg"
                      alt="Ví dụ về cấp bậc prototype javascript">
                  </div>
                </div>

                <p class="mt-4">
                  Nhưng như vậy chúng ta cũng chưa thể khẳng định cho câu định nghĩa trên vì <b>các kiểu dữ liệu nguyên thủy</b> như số, chuỗi, boolean...
                  thì nó có kế thừa <b>Object.prototype</b> hay không?
                </p>
                <p>
                  Mặc dù chúng không phải là kiểu dữ liệu object nhưng nếu chúng ta thử truy cập thuộc tính của nó thì các object sẽ được tạo ra bằng cách sử dụng 
                 constructor <b><code>Number</code></b>, <b><code>String</code></b>, <b><code>Boolean</code></b>. Và những object này sẽ bị ẩn đi 
                 và chúng ta chỉ thấy được nó khi sử dụng <b><code>__proto__</code></b>. Để dễ hiểu bạn xem đoạn giải thích về chuỗi sau đây nhé.
                </p>
                <p>
                 Bạn còn nhớ chúng ta có thể <b>đếm ký tự trong chuỗi</b> bằng lệnh <b><code>(Chuỗi).length</code></b>. Nhưng chuỗi là kiểu dữ liệu nguyên thủy vậy thì phương thức này được lấy từ đâu?
                </p>
                <p>
                 Trong trường hợp này thì giá trị chuỗi sẽ được ép vào một đối tượng String nên chúng ta có thể sử dụng được phương thức đó
                 thông qua <b><code>String.prototype</code></b>.
                </p>
                <p>
                  Bây giờ chúng ta thử đi vào xem <b>String.prototype</b> bằng đoạn code bên dưới nhé:
                </p>

                <p>
                  <mark class="p-1"><b>Đoạn Code:</b></mark>
                </p>
                <pre><code class="javascript"> let chuoi = "Xin Chào Các Bạn";<br/> console.log(chuoi.__proto__);</code></pre>
                <p class="mt-4">
                  <mark class="p-1"><b>Kết Quả:</b></mark>
                </p>
                <img class="img-thumbnail img-fluid shadow p-2 lazyload"
                  data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590203726/Javascript-prototype/Kiem-tra-String-prototype-bang-proto_sxawbu.png"
                  alt="Kiểm tra String.prototype bằng __proto__">
                <p class="mt-4">
                  Như bạn thấy nó có rất nhiều phương thức được kế thừa từ <b>String.prototype</b>. Và khi nó đã là 
                  object thì nó cũng sẽ kế thừa từ <b><code>Object.prototype</code></b>. Để dễ hình dung bạn xem hình ảnh sau đây nhé:
                </p>

                <div class="row">
                  <div class="col-md-4 col-sm-8">
                    <img class=" lazyload" width="100"
                      data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590204060/Javascript-prototype/vi-du-String-prototype_ejmztv.svg"
                      alt="Ví dụ String.prototype javascript">
                  </div>
                </div>

                <p class="mt-4">
                 Bây giờ  chúng ta có thể trả lời câu hỏi trên rồi nhé.
                </p>

                <div class="row">
                  <div class="col-sm-12 bg-light p-2 mt-4 mb-4 shadow rounded-pill">
                    <h3 class="text-primary ml-4 title-article-size"><b>Không Sử Dụng __proto__</b></h3>
                  </div>
                </div>
                <p>
                  Ngày nay thì <b><code>__proto__</code></b> thì ít được sử dụng hơn  vì trong phiên bản Javascript
                  mới thì có cung cấp thêm cho chúng ta một số phương thức tiện ích hơn như là:
                  <ul>
                    <li>
                      <b>Object.create()</b>: Tạo một đối tượng rỗng, sử dụng đối tượng hiện có để làm <b><code>prototype</code></b> (nguyên mẫu) cho đối tượng đó.
                    </li>
                    <li>
                      <b>Object.getPrototypeOf()</b>: Trả về <b>prototype</b> của một đối tượng xác định.
                    </li>
                    <li>
                      <b>Object.setPrototypeOf()</b>: Thiết lập <b>prototype</b> của một đối tượng xác định cho một đối tượng khác.
                    </li>
                  </ul>
                </p>
                <p>
                  Để hiểu rõ hơn bạn xem đoạn code sau nhé:
                </p>
                <p>
                  <mark class="p-1"><b>Đoạn Code:</b></mark>
                </p>
                <pre><code class="javascript"> let dongVat= {<br/> an: true<br/> };<br/> /* Tạo một đối tượng mới với dongVat là prototype */<br/> let meo = Object.create(dongVat);<br/> console.log(meo.an);<br/>  /*Kiểm tra prototype cua meo*/<br/> console.log(Object.getPrototypeOf(meo) === dongVat);/*true*/<br/> /*Thiết lập thuộc prototype khác cho đối tượng meo*/<br/> Object.setPrototypeOf(meo, {}); // thay đổi prototype cua meo đến {} (Object)<br/></code></pre>
                <p class="mt-4">
                  <mark class="p-1"><b>Kết Quả:</b></mark>
                </p>
                <img class="img-thumbnail img-fluid shadow p-2 lazyload"
                  data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590206760/Javascript-prototype/object-prototype-create-get-set_qllu6j.png"
                  alt="Object prototype create get set">
               































            <h4 class="mt-4"> <b><i class="fa fa-tasks" aria-hidden="true"></i> Tổng kết: </b></h4>


            <p>Qua đây mình mong bài viết sẽ giúp bạn hiểu được <b>khái niệm cũng như cách sử dụng prototype</b>
              trong ngôn ngữ
              Javascript và
              nếu có thắc mắc gì cứ gửi email mình sẽ phản hồi sớm nhất có thể. Rất
              mong bạn tiếp tục ủng
              hộ trang web để mình có thể viết nhiều bài hay hơn nữa nhé. Chúc bạn có một ngày vui vẻ!</p>

          </div>
        </article>
      </div>
    </div>




    <div class="mb-5"></div>
  </div>
  <div class="col-lg-12 col-md-12 col-xs-12">
    <div class="mt-5"></div>
    <div class="card card-search">
      <div class="card-header card-header-category">
        Từ Khóa
      </div>
      <div class="card-body card-body-search mt-4">
        <h3 class="button-article"><a href="/article/css"><button type="button"
              class="CSS btn shadow-sm rounded btn-success m-2 pl-3 pr-3">CSS</button></a>
          <a href="/article/html"><button type="button"
              class="HTML btn shadow-sm rounded btn-success m-2 pl-3 pr-3">HTML</button></a>
          <a href="/article/nodejs">
            <button type="button" class="btn shadow-sm rounded btn-success m-2 pl-3 pr-3">NodeJS</button></a>
        </h3>
      </div>
    </div>


  </div>
</div>
</div>

<script src='/javascripts/highlight.pack.js'></script>
<script>
  hljs.initHighlightingOnLoad();
</script>
<script>
  $(document).ready(function () {
    const win = $(window);
    const doc = $(document);
    const progressBar = $('progress');
    const progressLabel = $('.progress-label');
    const setValue = () => win.scrollTop();
    const setMax = () => doc.height() - win.height();
    const setPercent = () => Math.round(win.scrollTop() / (doc.height() - win.height()) * 100);

    progressLabel.text(setPercent() + '%');
    progressBar.attr({
      value: setValue(),
      max: setMax()
    });

    doc.on('scroll', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue()
      });
    });

    win.on('resize', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue(),
        max: setMax()
      });
    })
  });
</script>
<script>
  var container = document.getElementById('content-box');

  $(window).on('load resize', (function () {
    windowsize = $(window).width();

    if ((windowsize <= 992) && (screen.height >= 768)) {
      container.classList.remove('container');
      container.classList.add('container-fluid')

      //navbar
      $('.nav-item').addClass('hvr-underline-from-left')
    } else {
      container.classList.add('container');
      container.classList.remove('container-fluid')

      //navbar
      $('.nav-item').removeClass('hvr-underline-from-left')
    }
  }));
</script>

<script src="/javascripts/lazysizes.min.js" async></script>
<%- include('footer') -%>