<%- include('header') -%>
<!--Content-->
<div class="jumbotron jumbotron-fluid image-slider">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">
      <div class="content-image">
        <div class="content">
          <blockquote class="blockquote">
            <h1 class="mb-2 content-header">Tôi không có tài năng gì cả. Tôi chỉ đam mê hiểu biết</h1>
            <footer class="blockquote-footer text-right text-white">Albert Einstein</footer>
          </blockquote>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="header-text text-center mt-5 ">
</div>
<div class="container mt-5" id="content-box">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">

      <hr />
      <div class="card-text text-justify">
        <article>
          <div class="row">
            <div class="col-sm-12">
              <h2 class="bg-primary mb-4 text-white rounded p-2 shadow title-article-size"><i class="fa fa-cube"
                  aria-hidden="true"></i>Object Phần 2 Trong Javascript</h2>
            </div>
          </div>

          <div class="article-title">
            <div class="progress-wrapper">
              <div class="progress-label"></div><progress></progress>
            </div>
          </div>
          <div class="text-content-article mt-5">
            <p><i>Hôm nay bạn hãy cùng mình sẽ tiếp tục đi vào tìm hiểu khái niệm cũng như cách sử dụng object trong
                ngôn
                ngữ lập trình Javascript cho trang web nhé.</i>
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mt-4 mb-4 shadow rounded-pill">
                <h4 class="text-primary ml-4 title-article-size">Kiểu dữ liệu <b>Object</b> Trong Javascript</h4>
              </div>
            </div>





            <h5 class="text-white bg-secondary p-2 shadow  title-article-size rounded">Cách sao chép <b>Object</b> trong
              Javascript:</h5>
            <p class="mt-4">
              Thông thường đối với các kiểu dữ liệu nguyên thủy (kiểu dữ liệu chuỗi, số, boolean) thì bạn có thể sao
              chép giá trị của một biến sau đó
              lưu vào một biến khác. Và khi giá trị <b>biến sao chép</b> thay đổi thì không ảnh hưởng đến giá trị của
              <b>biến được sao chép</b>.
              Để hiểu rõ hơn bạn xem đoạn code sau nhé:
            </p>
            <pre><code class="javascript"> let thongDiep = 'Xin Chào'; <br/> let chaoHoi = thongDiep;</code></pre>

            <p class="mt-4">
              Để bạn dễ hình dùng thì bạn nhìn vào ảnh bên dưới nhé:
            </p>

            <img class="lazyload" height="250"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1588687181/Object-Javascript/vi-du-sao-chep-bien-nguyen-thuy_ybnues.svg"
              alt="Truy cập key nhiều kí tự trong đối tượng">
            <p class="mt-4">
              Các bạn có thể thấy là hai biến này lưu trữ chuỗi <b>"Xin Chào"</b> hoàn toàn độc lập với nhau nên khi
              chúng ta thay đổi giá trị của một biến sẽ không ảnh hưởng
              đến biến còn lại. Để hiểu rõ hơn bạn thử xem đoạn code sau đây nhé:
            </p>
            <pre><code class="javascript"> let thongDiep = 'Xin Chào'; <br/> let chaoHoi = thongDiep;<br/> chaoHoi = 'Hello'; <br/> console.log(thongDiep);<br/> console.log(chaoHoi);</code></pre>
            <p class="mt-4">
              Ở đây mình xin có một số lưu ý nhỏ là:
              <ul>
                <li>Đầu tiên chúng ta khai báo biến <b><code>thongDiep</code></b> với giá trị là chuỗi <b>'Xin
                    Chào'</b>.</li>
                <li>Tiếp theo chúng ta khai báo biến <b><code>chaoHoi</code></b> có giá trị bằng với biến
                  <b><code>thongDiep</code></b> với giá trị là chuỗi <b>'Xin Chào'</b>.</li>
                <li>Sau đó chúng ta thay đổi giá trị biến <b><code>chaoHoi</code></b> với chuỗi <b>'Hello'</b>.</li>
              </ul>
            </p>
            <p>
              Bây giờ chúng ta thử xem kết quả của đoạn code trên xem giá trị của hai biến <b><code>thongDiep</code></b>
              và <b><code>chaoHoi</code></b>
              như thế nào nhé:
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1588688332/Object-Javascript/sao-chep-bien-nguyen-thuy-javascript_cmvwif.png"
              alt="Sao chép biến nguyên thủy trong Javascript">
            <p class="mt-4">
              Khi bạn đã hiểu về cách sao chép giá trị của biến nguyên thủy thì chúng ta sẽ đi vào cách sao chép
              giá trị biến <b>object(đối tượng)</b>. Nó không lưu trữ trực tiếp vào biến như ở trong biến loại kiểu dữ
              liệu nguyên thủy,
              mà biến được gán kiểu dữ liệu <b>object(đối tượng)</b> sẽ như một đại diện và tham chiếu đến địa chỉ bộ
              nhớ lưu trữ đối tượng này trong Javascript.
              Nghe hơi khó hiểu nhưng bạn cố gắng theo dõi ví dụ dưới đây để hiểu rõ hơn nhé:
            </p>
            <pre><code class="javascript"> let khachHang = { <br/> &nbsp;&nbsp;&nbsp;&nbsp; ten: "An"<br/>&nbsp;&nbsp;}</code></pre>
            <p class="mt-4">
              Bạn có thể xem hình ảnh bên dưới để nắm rõ hơn nhé:
            </p>

            <img class="lazyload" height="250"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1588689172/Object-Javascript/luu-tru-bien-object_wzomaz.svg"
              alt="Lưu trữ biến trong object javascript">
            <p class="mt-4">
              Các bạn có thể hình dung là object(đối tượng) sẽ được lưu trữ vào một nơi nào đó trong bộ nhớ của chương trình và 
              biến <b><code>khachHang</code></b> sẽ tham chiếu để lấy giá trị của nó. Tiếp theo chúng ta sẽ đi vào tìm hiểu  cách sao chép 
              object(đối tượng) bằng đoạn code sau nhé:
            </p>
            <pre><code class="javascript"> let khachHang = { <br/> &nbsp;&nbsp;&nbsp;&nbsp; ten: "An"<br/>&nbsp;&nbsp;};<br/> let nguoiDung = khachHang;</code></pre>
            <p class="mt-4">
              Để dễ hình dung thì bạn xem hình ảnh bên dưới nhé:
            </p>
            <img class="lazyload" height="250"
            data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1588689742/Object-Javascript/tham-chieu-object-trong-javascript_dkqeqn.svg"
            alt="Sao chép hai biến object trong javascript">
            <p class="mt-4">
              Ở đây bạn có thể thấy điểm khác kiểu <b>object(đối tượng)</b> so với các kiểu dữ liệu còn lại là 
              mỗi biến không trực tiếp lưu trữ biến như ví dụ của kiểu dữ liệu nguyên thủy(primitives) mà chúng chỉ sao 
              chép địa chỉ tham chiếu  đến cùng một nơi <b>lưu trữ object(đối tượng)</b>.
            </p>
            <p><b>Vậy tại sao nãy giờ mình lại cố gắng so sánh biến kiểu nguyên thủy với biến kiểu object để làm gì?</b></p>
            <p>Điểm mấu chốt ở đây chính là khi sao chép object(đối tượng) thì <b>object(bị sao chép) sẽ 
            bị ảnh hưởng khi mà biến sao chép thay đổi.</b> Để hiểu rõ hơn bạn xem ví dụ sau đây nhé: </p>
            <pre><code class="javascript"> let khachHang = { <br/> &nbsp;&nbsp;&nbsp;&nbsp; ten: "An"<br/>&nbsp;&nbsp;};<br/> let nguoiDung = khachHang;</code></pre>
















            <h4 class="mt-4"> <b><i class="fa fa-tasks" aria-hidden="true"></i> Tổng kết: </b></h4>

            <p>
              Mình có một số đúc kết khi sử dụng object(đối tượng) trong Javascript như sau:
              <ul>
                <li>Object là nơi tập hợp các cặp giá trị key-value thường gọi là thuộc tính và được đặt trong dấu
                  <b><code>{}</code></b>.</li>
                <li>Ta có thể truy cập thuộc tính bằng cách sử dụng dấu chấm hay dấu [].</li>
                <li>Ta có thể xóa thuộc tính bằng cách sử dụng <b><code>delete</code></b>.</li>
                <li>Kiểm tra một thuộc thuộc tính có tồn tại hay không thì ta sẽ sử dụng <b><code>in</code></b>.</li>
                <li>Lấy dữ liệu các cặp giá trị key-value thì ta có thể sử dụng vòng lặp <b><code>for...in</code></b>.
                </li>

              </ul>
            </p>
            <p>Qua đây mình mong bài viết sẽ giúp bạn hiểu được khái niệm cũng như cách sử dụng object(đối tượng)
              trong ngôn ngữ
              Javascript và
              nếu có thắc mắc gì cứ gửi email mình sẽ phản hồi sớm nhất có thể. Rất
              mong bạn tiếp tục ủng
              hộ trang web để mình có thể viết nhiều bài hay hơn nữa nhé. Chúc bạn có một ngày vui vẻ!</p>

          </div>
        </article>
      </div>
    </div>




    <div class="mb-5"></div>
  </div>
  <div class="col-lg-12 col-md-12 col-xs-12">
    <div class="mt-5"></div>
    <div class="card card-search">
      <div class="card-header card-header-category">
        Từ Khóa
      </div>
      <div class="card-body card-body-search mt-4">
        <h3 class="button-article"><a href="/article/css"><button type="button"
              class="CSS btn shadow-sm rounded btn-success m-2 pl-3 pr-3">CSS</button></a>
          <a href="/article/html"><button type="button"
              class="HTML btn shadow-sm rounded btn-success m-2 pl-3 pr-3">HTML</button></a>
          <a href="/article/nodejs">
            <button type="button" class="btn shadow-sm rounded btn-success m-2 pl-3 pr-3">NodeJS</button></a>
        </h3>
      </div>
    </div>


  </div>
</div>
</div>

<script src='/javascripts/highlight.pack.js'></script>
<script>
  hljs.initHighlightingOnLoad();
</script>
<script>
  $(document).ready(function () {
    const win = $(window);
    const doc = $(document);
    const progressBar = $('progress');
    const progressLabel = $('.progress-label');
    const setValue = () => win.scrollTop();
    const setMax = () => doc.height() - win.height();
    const setPercent = () => Math.round(win.scrollTop() / (doc.height() - win.height()) * 100);

    progressLabel.text(setPercent() + '%');
    progressBar.attr({
      value: setValue(),
      max: setMax()
    });

    doc.on('scroll', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue()
      });
    });

    win.on('resize', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue(),
        max: setMax()
      });
    })
  });
</script>
<script>
  var container = document.getElementById('content-box');

  $(window).on('load resize', (function () {
    windowsize = $(window).width();

    if ((windowsize <= 992) && (screen.height >= 768)) {
      container.classList.remove('container');
      container.classList.add('container-fluid')

      //navbar
      $('.nav-item').addClass('hvr-underline-from-left')
    } else {
      container.classList.add('container');
      container.classList.remove('container-fluid')

      //navbar
      $('.nav-item').removeClass('hvr-underline-from-left')
    }
  }));
</script>
<script src="/javascripts/lazysizes.min.js" async></script>
<%- include('footer') -%>