<%- include('header') -%>
<!--Content-->
<div class="jumbotron jumbotron-fluid image-slider">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">
      <div class="content-image">
        <div class="content">
          <blockquote class="blockquote">
            <h1 class="mb-2 content-header">Tôi không có tài năng gì cả. Tôi chỉ đam mê hiểu biết</h1>
            <footer class="blockquote-footer text-right text-white">Albert Einstein</footer>
          </blockquote>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="header-text text-center mt-5 ">
</div>
<div class="container mt-5" id="content-box">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">

      <hr />
      <div class="card-text text-justify">
        <article>
          <div class="row">
            <div class="col-sm-12">
              <h2 class="bg-primary mb-4 text-white rounded p-2 shadow title-article-size"><i class="fa fa-cube"
                  aria-hidden="true"></i> Phương Thức và Từ Khóa <b>this</b> Object Trong Javascript</h2>
            </div>
          </div>

          <div class="article-title">
            <div class="progress-wrapper">
              <div class="progress-label"></div><progress></progress>
            </div>
          </div>
          <div class="text-content-article mt-5">
            <p><i>Hôm nay bạn hãy cùng mình  đi vào tìm hiểu khái niệm cũng như cách sử dụng phương thức và từ khóa this với object trong
                ngôn
                ngữ lập trình Javascript để phát triển web nhé.</i>
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mt-4 mb-4 shadow rounded-pill">
                <h4 class="text-primary ml-4 title-article-size">Kiểu dữ liệu <b>Object</b> Trong Javascript</h4>
              </div>
            </div>





            <h5 class="text-white bg-secondary p-2 shadow  title-article-size rounded">
              Method (Phương Thức) <b>Object</b> trong Javascript:
            </h5>
            <p class="mt-4">
              Ở các bài trước bạn chỉ thấy các thuộc tính của object, hôm nay chúng ta sẽ đi vào phương thức(hành động) của object 
             . Các hành động đó được hiển thị thông qua <b>functuon (hàm)</b>. Để dễ hiểu thì bạn có thể hình dung một đối tượng (object) trong thực thực 
             tế là một con mèo thì:
             <ul>
               <li><b>Thuộc tính (property)</b> của nó là màu sắc, cân nặng, tuổi...</li>
               <li><b>Phương thức (method)</b> của nó là ngủ(), kêu() , chạy()...</li>
             </ul>
            </p>
            <p>
              Như bạn thấy phương thức là cách miêu tả các hành động của các đối tượng trong thực tế. Để hiểu rõ hơn chúng ta hãy đi vào ví dụ cụ thể 
              sau đây nhé:
            </p>
            
            <pre><code class="javascript">&nbsp;let&nbsp;meo&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;ten:&nbsp;"Boo",<br/> &nbsp;&nbsp;&nbsp;mauSac:&nbsp;"Đen"<br/> &nbsp;};<br/> &nbsp;meo.keu&nbsp;=&nbsp;function()&nbsp;{<br/> &nbsp;&nbsp;&nbsp;console.log("Meow&nbsp;Meow");<br/> &nbsp;};<br/><br/> &nbsp;meo.keu();<br/></code></pre>

            <p class="mt-4">
              Bạn xem kết quả bên dưới nhé:
            </p>

            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1588756458/Method%20Object%20JS/phuong-thuc-method-trong-object-js_dusg0q.png"
              alt="Phương Thức Method Object trong Javascript">
        <p class="mt-4">
          <ul>
            <li>Đầu tiên chúng ta tạo ra một biến object(đối tượng) với tên là
              <b><code>meo</code></b>. </li>
              <li>Tiếp theo ta tạo ra một function(hàm) và gán nó vào trong thuộc tính <b><code> meo.keu</code></b> của đối tượng <b><code>meo</code></b>.</li>
              <li>Sau đó chúng ta  sẽ gọi phương thức của đối tượng <b><code>meo</code></b> bằng cách <b><code> meo.keu()</code></b> thì lúc này hàm sẽ được thực thi và xuất ra màn hình chúng ta là dòng chữ "Meow Meow".</li>
            </ul>
        </p>

        <p>
          Ngoài ra chúng ta cũng có cách xác định phương thức cho đối tượng bằng cách <b>khai báo hàm trước</b> rồi 
          sau đó mới thêm vào thuộc tính của object. Để hiểu rõ hơn bạn xem ví dụ sau đây nhé:
        </p>
        <pre><code class="javascript">&nbsp;let&nbsp;meo&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;ten:&nbsp;"Boo",<br/> &nbsp;&nbsp;&nbsp;&nbsp;mauSac:&nbsp;"Đen"<br/> &nbsp;&nbsp;};<br/> &nbsp;&nbsp;function&nbsp;keu()&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log("Meow&nbsp;Meow");<br/> &nbsp;&nbsp;};<br/>&nbsp;&nbsp;meo.keu&nbsp;=&nbsp;keu;<br/>&nbsp;&nbsp;meo.keu();<br/></code></pre>
        <p class="mt-4">
          Bạn xem kết quả bên dưới nhé:
        </p>

        <img class="img-thumbnail img-fluid shadow p-2 lazyload"
          data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1588766761/Method%20Object%20JS/phuong-thuc-khai-bao-method-trong-object-js_f43enf.png"
          alt="Phương Thức Khai Báo Function(Hàm) Method Object trong Javascript">
        <p class="mt-4">
          Ngoài ra bạn có thể <b>khái báo method(phương thức)</b> trực tiếp trong object bằng ví dụ sau đây nhé:
        </p>
        <pre><code class="javascript">&nbsp;let&nbsp;meo&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ten:&nbsp;"Boo",<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mauSac:&nbsp;"Đen",<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keu:&nbsp;function(){<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log("Meow&nbsp;Meow");<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/> &nbsp;};<br/> &nbsp;meo.keu();//Kết quả: Meow Meow<br/></code></pre>
        <p class="mt-4">
          Bạn cũng có thể khai khai báo method(phương thức) trong object bằng cú pháp <b>ES6</b> giúp chúng ta rút ngắn đoạn code hơn ở ví dụ trên.
          Để hiểu rõ hơn bạn xem đoạn code sau nhé:
        </p>
        <pre><code class="javascript">&nbsp;let&nbsp;meo&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ten:&nbsp;"Boo",<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mauSac:&nbsp;"Đen",<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keu() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log("Meow&nbsp;Meow");<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/> &nbsp;};<br/> &nbsp;meo.keu();//Kết quả: Meow Meow<br/></code></pre>

        <h5 class="text-white bg-secondary p-2 shadow mt-4  title-article-size rounded">
         <b>This</b> Trong Method (Phương Thức):
        </h5>
        <p class="mt-4">
          Thông thường trong thực tế thì bạn sẽ có lúc cần truy cập và sử dụng dữ liệu của đối tượng cho phương thức hiện có 
          thì từ khóa <b><code>this</code></b> rất phù hợp cho việc này.
        </p>
        <p>
          Trong phương thức (method), giá trị <b><code>this</code></b> sẽ <b>tham chiếu đến đối tượng mà đang chứa 
          phương thức đó</b> vì vậy bạn có thể truy cập, lấy dữ liệu của đối tượng này. Bây giờ chúng ta thử đi vào tìm hiểu cú pháp của nó nhé:
        </p>
        <pre><code class="javascript"> this.(Tên Thuộc Tính)</code></pre>
        <p>
          Sau khi nắm sơ lược về cú pháp, chúng ta sẽ đi vào ví dụ thực tế bằng cách xây dựng hành động xin chào 
          với dữ liệu được lấy từ thông tin khách hàng. Để hiểu rõ hơn bạn xem ví dụ sau đây nhé:
        </p>
        <pre><code>&nbsp;let&nbsp;khachHang&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ten:&nbsp;'An',<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ho:&nbsp;'Nguyễn',<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xinChao:&nbsp;function&nbsp;()&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Xin&nbsp;Chào&nbsp;Khách&nbsp;Hàng&nbsp;'&nbsp;+&nbsp;this.ho&nbsp;+&nbsp;'&nbsp;'&nbsp;+&nbsp;this.ten);<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/> &nbsp;};<br/> &nbsp;khachHang.xinChao();<br/></code></pre>

        <p class="mt-4">
          Bạn xem kết quả bên dưới nhé:
        </p>

        <img class="img-thumbnail img-fluid shadow p-2 lazyload"
          data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1588818488/Method%20Object%20JS/Su-Dung-This-Trong-Object-JS_q2bje2.png"
          alt="Sử dụng từ khóa this trong Object Javascript">
        <p class="mt-4">
          Ở đây mình có vài lưu ý nhỏ tý là:
          <ul>
            <li>Chúng ta sẽ tạo một biến object <b><code>khachHang</code></b> với hai thông tin là tên, họ của khách hàng
            và phương thức Xin Chào.
            </li>
            <li>
              Trong phương thức Xin Chào chúng ta sẽ sử dụng từ khóa <b><code>this</code></b> để tham chiếu đến object của nó
              là <b><code>khachHang</code></b>.
            </li>
            <li>Lúc này <b><code>this.ho</code></b> sẽ bằng với <b><code>khachHang.ho</code></b> và <b><code>this.ten</code></b> sẽ bằng với <b><code>khachHang.ten</code></b>.</li>
            <li>Cuối cùng kết quả bạn sẽ thấy như hình ảnh trên.</li>
          </ul>
        </p>

        <p>
          Bây giờ ta sẽ đi vào một trường hợp là bạn có hai khách hàng khác nhau, như những gì chúng ta đã học  thì sẽ cần hai 
          phương thức xin chào cho mỗi đối tượng khách hàng cụ thể như ví dụ sau đây:
        </p>
        <pre><code class="javascript">&nbsp;let&nbsp;khachHang1&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ten:&nbsp;'An',<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ho:&nbsp;'Nguyễn',<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xinChao:&nbsp;function&nbsp;()&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Xin&nbsp;Chào&nbsp;Khách&nbsp;Hàng&nbsp;'&nbsp;+&nbsp;this.ho&nbsp;+&nbsp;'&nbsp;'&nbsp;+&nbsp;this.ten);<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/> &nbsp;&nbsp;};<br/> &nbsp;let&nbsp;khachHang2&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ten:&nbsp;'Lan',<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ho:&nbsp;'Đỗ',<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xinChao:&nbsp;function&nbsp;()&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Xin&nbsp;Chào&nbsp;Khách&nbsp;Hàng&nbsp;'&nbsp;+&nbsp;this.ho&nbsp;+&nbsp;'&nbsp;'&nbsp;+&nbsp;this.ten);<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/> &nbsp;&nbsp;};<br/> &nbsp;&nbsp;khachHang1.xinChao();<br/> &nbsp;&nbsp;khachHang2.xinChao();<br/></code></pre>

        <p class="mt-4">
          Bạn xem kết quả bên dưới nhé:
        </p>

        <img class="img-thumbnail img-fluid shadow p-2 lazyload"
          data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1588820045/Method%20Object%20JS/Su-Dung-This-Cho-NhieuObject-JS_zgrtmb.png"
          alt="Sử dụng từ khóa this cho nhiều Object Javascript">
        <p class="mt-4">
          Như bạn thấy nếu cứ mỗi lần có khách hàng mới thì ta lại thêm một phương thức xin chào khác cho đối tượng đó thì 
          việc như vậy sẽ rất mất thời gian và công sức. Nên  phương thức nào lặp đi lặp lại như vậy thì bạn có thể <b>viết
          phương thức đó dưới dạng một hàm</b> và  sử dụng cho nhiều loại đối tượng bằng từ khóa <b><code>this</code></b>.
          Để hiểu rõ hơn bạn xem ví dụ sau đây nhé:
        </p>
        <pre><code class="javascript">&nbsp;&nbsp;let&nbsp;khachHang1&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ten:&nbsp;'An',<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ho:&nbsp;'Nguyễn',<br/> &nbsp;&nbsp;};<br/> &nbsp;let&nbsp;khachHang2&nbsp;=&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ten:&nbsp;'Lan',<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ho:&nbsp;'Đỗ',<br/> &nbsp;&nbsp;};<br/> &nbsp;&nbsp;function&nbsp;xinChao(){<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log('Xin&nbsp;Chào&nbsp;Khách&nbsp;Hàng&nbsp;'&nbsp;+&nbsp;this.ho&nbsp;+&nbsp;'&nbsp;'&nbsp;+&nbsp;this.ten);<br/> &nbsp;&nbsp;&nbsp;}<br/> &nbsp;&nbsp;khachHang1.thongDiep&nbsp;=&nbsp;xinChao;<br/> &nbsp;&nbsp;khachHang2.thongDiep&nbsp;=&nbsp;xinChao;<br/><br/> &nbsp;&nbsp;khachHang1.thongDiep();<br/> &nbsp;&nbsp;khachHang2.thongDiep();<br/></code></pre>
        <p class="mt-4">
          Bạn xem kết quả bên dưới nhé:
        </p>

        <img class="img-thumbnail img-fluid shadow p-2 lazyload"
          data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1588820903/Method%20Object%20JS/Su-Dung-This-Function-Cho-Nhieu-Object-JS_nehfli.png"
          alt="Sử dụng từ khóa this dưới dạng function  trong Object Javascript">



            <h4 class="mt-4"> <b><i class="fa fa-tasks" aria-hidden="true"></i> Tổng kết: </b></h4>

       
            <p>Qua đây mình mong bài viết sẽ giúp bạn hiểu được cách <b>sử dụng phương thức(method) và từ khóa this trong  object(đối tượng)</b>
              trong ngôn ngữ
              Javascript và
              nếu có thắc mắc gì cứ gửi email mình sẽ phản hồi sớm nhất có thể. Rất
              mong bạn tiếp tục ủng
              hộ trang web để mình có thể viết nhiều bài hay hơn nữa nhé. Chúc bạn có một ngày vui vẻ!</p>

          </div>
        </article>
      </div>
    </div>




    <div class="mb-5"></div>
  </div>
  <div class="col-lg-12 col-md-12 col-xs-12">
    <div class="mt-5"></div>
    <div class="card card-search">
      <div class="card-header card-header-category">
        Từ Khóa
      </div>
      <div class="card-body card-body-search mt-4">
        <h3 class="button-article"><a href="/article/css"><button type="button"
              class="CSS btn shadow-sm rounded btn-success m-2 pl-3 pr-3">CSS</button></a>
          <a href="/article/html"><button type="button"
              class="HTML btn shadow-sm rounded btn-success m-2 pl-3 pr-3">HTML</button></a>
          <a href="/article/nodejs">
            <button type="button" class="btn shadow-sm rounded btn-success m-2 pl-3 pr-3">NodeJS</button></a>
        </h3>
      </div>
    </div>


  </div>
</div>
</div>

<script src='/javascripts/highlight.pack.js'></script>
<script>
  hljs.initHighlightingOnLoad();
</script>
<script>
  $(document).ready(function () {
    const win = $(window);
    const doc = $(document);
    const progressBar = $('progress');
    const progressLabel = $('.progress-label');
    const setValue = () => win.scrollTop();
    const setMax = () => doc.height() - win.height();
    const setPercent = () => Math.round(win.scrollTop() / (doc.height() - win.height()) * 100);

    progressLabel.text(setPercent() + '%');
    progressBar.attr({
      value: setValue(),
      max: setMax()
    });

    doc.on('scroll', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue()
      });
    });

    win.on('resize', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue(),
        max: setMax()
      });
    })
  });
</script>
<script>
  var container = document.getElementById('content-box');

  $(window).on('load resize', (function () {
    windowsize = $(window).width();

    if ((windowsize <= 992) && (screen.height >= 768)) {
      container.classList.remove('container');
      container.classList.add('container-fluid')

      //navbar
      $('.nav-item').addClass('hvr-underline-from-left')
    } else {
      container.classList.add('container');
      container.classList.remove('container-fluid')

      //navbar
      $('.nav-item').removeClass('hvr-underline-from-left')
    }
  }));
</script>
<script src="/javascripts/lazysizes.min.js" async></script>
<%- include('footer') -%>