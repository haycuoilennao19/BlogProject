<%- include('header') -%>
<!--Content-->
<div class="jumbotron jumbotron-fluid image-slider">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">
      <div class="content-image">
        <div class="content">
          <blockquote class="blockquote">
            <h1 class="mb-2 content-header">Tôi không có tài năng gì cả. Tôi chỉ đam mê hiểu biết</h1>
            <footer class="blockquote-footer text-right text-white">Albert Einstein</footer>
          </blockquote>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="header-text text-center mt-5 ">
</div>
<div class="container mt-5" id="content-box">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">

      <hr />
      <div class="card-text text-justify">
        <article>
          <div class="row">
            <div class="col-sm-12">
              <h2 class="bg-primary mb-4 text-white rounded p-2 shadow title-article-size"><i class="fa fa-cube"
                  aria-hidden="true"></i> Constructor Function Trong Javascript</h2>
            </div>
          </div>

          <div class="article-title">
            <div class="progress-wrapper">
              <div class="progress-label"></div><progress></progress>
            </div>
          </div>
          <div class="text-content-article mt-5">
            <p><i>Hôm nay bạn hãy cùng mình  đi vào tìm hiểu khái niệm cũng như cách sử dụng constructor function trong
                ngôn
                ngữ lập trình Javascript để phát triển web nhé.</i>
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mt-4 mb-4 shadow rounded-pill">
                <h4 class="text-primary ml-4 title-article-size">Constructor Function Trong Javascript</h4>
              </div>
            </div>





            <h5 class="text-white bg-secondary p-2 shadow  title-article-size rounded">
              <b>Constructor Function</b> trong Javascript:
            </h5>
            <p class="mt-4">
            Ở các bài trước thì chúng ta hay <b>tạo một object</b> bằng cách sử dụng dấu <b><code>{}</code></b>
            . Nhưng  có một hạn chế vô cùng lớn khi sử dụng cách này là nếu các <b>object có cùng thuộc tính và phương thức</b>
            thì chúng ta cũng phải định nghĩa lại khi khởi tạo object bằng <b><code>{}</code></b>. Do đó <b>constructor function</b> được sinh ra để
             giúp ta giải quyết bài toán trên.
            </p>
            <p>
              Chúng ta có hai quy tắc khi sử dụng <b>constructor function</b> là:
              <ul>
                <li>Ký tự đầu tiên trong tên của <b>constructor function</b> phải là chữ in hoa.</li>
                <li>Để thực thi tạo ra object mới thì chúng ta phải sử dụng chúng với toán tử <b>new</b>.</li>
              </ul>
            </p>
            <p>Để hiểu rõ hơn bạn xem thử ví dụ đoạn code sau đây nhé:</p>
            
            <pre><code class="javascript">&nbsp;function&nbsp;KhachHang()&nbsp;{<br/> &nbsp;&nbsp;&nbsp;/*&nbsp;thuộc&nbsp;tính&nbsp;và&nbsp;phương&nbsp;thức&nbsp;của&nbsp;object&nbsp;*/<br/> &nbsp;}<br/>&nbsp;var&nbsp;khachHang1&nbsp;=&nbsp;new&nbsp;KhachHang();<br/></code></pre>
            <p>
              Như bạn thấy nó giống với <b>function (hàm)</b> bình thường nhưng điểm khác biệt thì mình đã liệt kê ở trên rồi nhé.
              Đoạn code trên là một ví dụ tổng quan khi chúng ta muốn tạo một object từ <b>constructor function</b>.
            </p>
            <p>
              Bây giờ chúng ta thử tạo nhiều object từ <b>constructor function</b> bằng đoạn code sau đây nhé:
            </p>
            <pre><code class="javascript">&nbsp;function&nbsp;KhachHang(ten,&nbsp;email)&nbsp;{<br/> &nbsp;&nbsp;&nbsp;this.ten&nbsp;=&nbsp;ten,<br/> &nbsp;&nbsp;&nbsp;this.email&nbsp;=&nbsp;email<br/> &nbsp;}<br/> <br/> &nbsp;let&nbsp;khachHang1&nbsp;=&nbsp;new&nbsp;KhachHang('An',&nbsp;'123@gmail.com');<br/> &nbsp;let&nbsp;khachHang2&nbsp;=&nbsp;new&nbsp;KhachHang('Lan',&nbsp;'abc@gmail.com');<br/> <br/> &nbsp;console.log(khachHang1&nbsp;);<br/> &nbsp;console.log(khachHang2&nbsp;);<br/></code></pre>
            <p class="mt-4">
              Bạn xem kết quả bên dưới nhé:
            </p>

            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1588843185/function%20constructor/vi-du-ve-constructor-function_qb1ccd.png"
              alt="Constructor Function trong Javascript">
        <p class="mt-4">
          <ul>
            <li>
              Đầu tiên chúng ta tạo ra một <b>constructor function</b> với tên là <b>khachHang</b>. 
            </li>
            <li>
              Khi chương trình chạy tới toán tử <b>new</b> thì nó sẽ tạo ra một object rỗng và được gán với từ khóa <b><code>this</code></b> trong <b>constructor function khachHang</b>.
             
            </li>
              <li>Sau đó nó sẽ gán các thuộc tính trong <b>constructor function</b> với tham số được truyền vào là <b><code>ten, email</code></b> theo cặp giá trị là <b>thuộc tính: giá trị</b>.</li>
              <li>Tiếp theo <b>constructor function</b> trả về một biến object đã có đầy đủ thông tin và gán vào biến mà ta gọi lệnh <b>new</b>.</li>
            </ul>
        </p>

      <p>Bây giờ bạn muốn tạo bao nhiêu thông tin khách hàng thì chỉ cần việc gọi <b><code>let tenkhachHang = new KhachHang('Ten', 'Email');</code></b>.
      </p>
      <h6 class="text-primary mt-4"><b><u>Sử dụng phương thức (method) trong constructor function</u></b></h6>
      <p>
        Bây giờ chúng ta sẽ tiếp tục đi vào tìm hiểu cách sử dụng phương thức khi tạo object bằng constructor function
        thông qua ví dụ dưới đây nhé:
      </p>
      <pre><code class="javascript">&nbsp;function&nbsp;khachHang(ten)&nbsp;{<br/> &nbsp;&nbsp;this.ten=&nbsp;ten;<br/> &nbsp;&nbsp;this.xinChao&nbsp;=&nbsp;function()&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(&nbsp;"Khách&nbsp;Hàng&nbsp;Tên&nbsp;Là&nbsp;"&nbsp;+&nbsp;this.ten);<br/> &nbsp;&nbsp;};<br/> }<br/> <br/> &nbsp;let&nbsp;khachHang1&nbsp;=&nbsp;new&nbsp;khachHang("An");<br/> &nbsp;khachHang1.xinChao();<br/></code></pre>
      <p class="mt-4">
        Bạn xem kết quả bên dưới nhé:
      </p>

      <img class="img-thumbnail img-fluid shadow p-2 lazyload"
        data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1588857026/function%20constructor/su-dung-method-trong-constructor-function_auosq8.png"
        alt="Sử Dụng Method Constructor Function trong Javascript">




























            <h4 class="mt-4"> <b><i class="fa fa-tasks" aria-hidden="true"></i> Tổng kết: </b></h4>

       
            <p>Qua đây mình mong bài viết sẽ giúp bạn hiểu được cách <b>sử dụng constructor function</b>
              trong ngôn ngữ
              Javascript và
              nếu có thắc mắc gì cứ gửi email mình sẽ phản hồi sớm nhất có thể. Rất
              mong bạn tiếp tục ủng
              hộ trang web để mình có thể viết nhiều bài hay hơn nữa nhé. Chúc bạn có một ngày vui vẻ!</p>

          </div>
        </article>
      </div>
    </div>




    <div class="mb-5"></div>
  </div>
  <div class="col-lg-12 col-md-12 col-xs-12">
    <div class="mt-5"></div>
    <div class="card card-search">
      <div class="card-header card-header-category">
        Từ Khóa
      </div>
      <div class="card-body card-body-search mt-4">
        <h3 class="button-article"><a href="/article/css"><button type="button"
              class="CSS btn shadow-sm rounded btn-success m-2 pl-3 pr-3">CSS</button></a>
          <a href="/article/html"><button type="button"
              class="HTML btn shadow-sm rounded btn-success m-2 pl-3 pr-3">HTML</button></a>
          <a href="/article/nodejs">
            <button type="button" class="btn shadow-sm rounded btn-success m-2 pl-3 pr-3">NodeJS</button></a>
        </h3>
      </div>
    </div>


  </div>
</div>
</div>

<script src='/javascripts/highlight.pack.js'></script>
<script>
  hljs.initHighlightingOnLoad();
</script>
<script>
  $(document).ready(function () {
    const win = $(window);
    const doc = $(document);
    const progressBar = $('progress');
    const progressLabel = $('.progress-label');
    const setValue = () => win.scrollTop();
    const setMax = () => doc.height() - win.height();
    const setPercent = () => Math.round(win.scrollTop() / (doc.height() - win.height()) * 100);

    progressLabel.text(setPercent() + '%');
    progressBar.attr({
      value: setValue(),
      max: setMax()
    });

    doc.on('scroll', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue()
      });
    });

    win.on('resize', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue(),
        max: setMax()
      });
    })
  });
</script>
<script>
  var container = document.getElementById('content-box');

  $(window).on('load resize', (function () {
    windowsize = $(window).width();

    if ((windowsize <= 992) && (screen.height >= 768)) {
      container.classList.remove('container');
      container.classList.add('container-fluid')

      //navbar
      $('.nav-item').addClass('hvr-underline-from-left')
    } else {
      container.classList.add('container');
      container.classList.remove('container-fluid')

      //navbar
      $('.nav-item').removeClass('hvr-underline-from-left')
    }
  }));
</script>
<script src="/javascripts/lazysizes.min.js" async></script>
<%- include('footer') -%>