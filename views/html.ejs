<%- include('header') -%>
<!--Content-->
<div class="jumbotron jumbotron-fluid image-slider">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">
      <div class="content-image">
        <div class="content">
          <blockquote class="blockquote">
            <h1 class="mb-2 content-header">Tôi không có tài năng gì cả. Tôi chỉ đam mê hiểu biết</h1>
            <footer class="blockquote-footer text-right text-white">Albert Einstein</footer>
          </blockquote>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="header-text text-center mt-5 ">
</div>
<div class="container mt-5" id="content-box">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">

      <hr />
      <div class="card-text text-justify">
        <article>
          <div class="row">
            <div class="col-sm-12">
              <h2 class="bg-primary mb-4 text-white rounded p-2 shadow title-article-size"><i class="fa fa-cube"
                  aria-hidden="true"></i> Destructuring Assignment Trong Javascript</h2>
            </div>
          </div>

          <div class="article-title">
            <div class="progress-wrapper">
              <div class="progress-label"></div><progress></progress>
            </div>
          </div>
          <div class="text-content-article mt-5">
            <p><i>Hôm nay bạn hãy cùng mình đi vào tìm hiểu về khái niệm cũng như cách sử dụng Destructuring Assignment
                trong
                ngôn
                ngữ lập trình Javascript để phát triển web nhé.</i>
            </p>
            <p>
              <b>Destructuring Assignment</b> là cú pháp được cung cấp trong phiên bản ES6 giúp chúng ta có thể dễ dàng
              lấy các
              giá trị trong <b>array(mảng)</b> và <b>object(đối tượng)</b> để gán vào biến mà không cần phải sử dụng
              vòng lặp
              hay các phương thức khác. Bây giờ chúng ta sẽ cùng nhau đi vào tìm hiểu cách sử dụng của nó ở dưới đây nhé.
            </p>
            <div class="row">
              <div class="col-sm-12 bg-light p-2 mt-4 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size"> Destructuring Assignment Với Mảng:</h3>
              </div>
            </div>

            <p>
              Trước khi đi vào vấn đề chính thì mình sẽ minh họa sơ qua cách chúng ta hay lấy giá trị của các
              phần tử trong mảng thông qua ví dụ dưới đây nhé:
            </p>
            <h6 class="text-primary">
              Cách lấy giá trị phần tử thông thường:
            </h6>
            <p>
              Bây giờ chúng ta sẽ đi vào tìm hiểu cú pháp của nó nhé:
            </p>

            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let mang = ["Màu Xanh", "Màu Đỏ", "Màu Cam"];<br/>/*Cách lấy thông thường*/<br/> let mau1 = mang[0];<br/> let mau2 = mang[1];<br/> let mau3 = mang[2];<br/><br/> console.log(mau1);<br/> console.log(mau2);<br/> console.log(mau3);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589767487/Destructuring%20Assignment/lay-gia-tri-trong-mang_u7mc5e.png"
              alt="Lấy giá trị trong mảng  Javascript">
            <p class="mt-4">
              Bạn có thể tham khảo thêm mảng(array) ở <a
                href="https://www.niemvuilaptrinh.com/article/Array-Mang-Trong-Javascript"
                title="Array Trong Javascript">đường dẫn đây nhé</a>.
            </p>
            <p>
              Bây giờ chúng ta sẽ đi vào tìm hiểu cách sử dụng <b>Destructuring Assignment</b> để lấy các giá trị phần
              tử
              trong mảng ở ví dụ trên. Bạn xem đoạn code sau để nắm rõ hơn nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let mang = ["Màu Xanh", "Màu Đỏ", "Màu Cam"];<br/>/*Cách lấy phần tử bằng Destructuring Assignment*/<br/> let [mau1, mau2, mau3] = mang;<br/><br/> console.log(mau1);<br/> console.log(mau2);<br/> console.log(mau3);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589768145/Destructuring%20Assignment/Lay-phan-tu-bang-Destructuring-Assignment-mang-javascript_hbttdl.png"
              alt="Lấy giá trị trong mảng bằng Destructuring Assignment Javascript">
            <p class="mt-4">
              Nó sẽ tự động lấy giá trị theo số vị trí chỉ mục của phần tử trong mảng để gán vào cho biến. Khi sử dụng
              <b>destructuring assignments</b> nó
              sẽ giúp cho đoạn code dễ nhìn hơn cũng như giúp chúng ta lấy trị mà mình mong muốn trong mảng một cách
              nhanh hơn.
            </p>
            <h4 class="text-white bg-secondary p-2 shadow title-article-size rounded"> <b>Cách lấy những phần tử mong
                muốn trong destructuring assignments:</b></h4>
            <p>
              Như ví dụ trên nếu như bạn chỉ muốn lấy hai màu <b>"Màu Xanh"</b> và <b>"Màu Cam"</b> và bỏ phần tử ở giữa
              thì chúng ta
              có thể sử dụng dấu <b>phẩy</b> để ngăn cách các phần tử mà mình không muốn lấy ở trong mảng. Để dễ hình
              dung bạn xem
              đoạn code sau nhé:
            </p>

            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let mang = ["Màu Xanh", "Màu Đỏ", "Màu Cam"];<br/>/*Cách lấy phần tử bằng Destructuring Assignment*/<br/> let [mau1, , mau3] = mang;<br/><br/> console.log(mau1);<br/> console.log(mau3);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589769222/Destructuring%20Assignment/su-dung-dau-phay-Destructuring-Assignment-mang-javascript_qrdpr5.png"
              alt="Sử dung dấu phẩy trong Destructuring Assignment Javascript">

            <h4 class="text-white bg-secondary p-2 mt-4 shadow title-article-size rounded">
              <b>Cách lấy nhiều phần tử trong destructuring assignments:</b>
            </h4>
            <p>
              Cũng với ví dụ trên nếu chúng ta muốn lưu trữ <b>"Màu Xanh"</b> vào một biến và các phần tử còn lại vào
              trong một biến thì
              bạn có thể sử dụng dấu <b><code>...</code></b> trước biến đó. Để hiểu rõ hơn bạn xem ví dụ sau nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let mang = ["Màu Xanh", "Màu Đỏ", "Màu Cam"];<br/>/*Cách lấy phần tử bằng Destructuring Assignment*/<br/> let [mau1, ...mauConlai] = mang;<br/><br/> console.log(mau1);<br/> console.log(mauConlai);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589769911/Destructuring%20Assignment/su-dung-dau-ba-cham-Destructuring-Assignment_c72v7r.png"
              alt="Sử dung dấu ... trong Destructuring Assignment Javascript">

            <h4 class="text-white bg-secondary p-2 mt-4 shadow title-article-size rounded">
              <b>Sử dụng destructuring assignments với hàm (function):</b>
            </h4>
            <p>
              Chúng ta có thể lấy giá trị trả về của một hàm để gán vào trong biến bằng cách sử dụng <b>destructuring
                assignments</b>.
              Để hiểu rõ hơn bạn xem đoạn code sau nhé:
            </p>

            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> function mang() {<br/> &nbsp;&nbsp;&nbsp; return ["Màu Xanh", "Màu Đỏ", "Màu Cam"];<br/> }<br/>/*Cách lấy phần tử bằng Destructuring Assignment*/<br/> let [mau1, mau2, mau3] = mang();<br/><br/> console.log(mau1);<br/> console.log(mau2);<br/> console.log(mau3)</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589770919/Destructuring%20Assignment/su-dung-function-voi-Destructuring-Assignment_o8all0.png"
              alt="Sử dung function với Destructuring Assignment Javascript">
            <h4 class="text-white bg-secondary p-2 mt-4 shadow title-article-size rounded">
              <b>Gán kiểu dữ liệu khác với destructuring assignments:</b>
            </h4>
            <p>
              Để dễ hình dung chúng ta sẽ đi vào ví dụ gán giá trị vào các thuộc tính của object khi sử dụng
              destructuring assignments.
              Để hiểu rõ hơn bạn xem đoạn code sau nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let khachHang = {};<br/> [khachHang.ho, khachHang.ten] = ["Nguyễn", "An"];<br/><br/> console.log(khachHang);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589771356/Destructuring%20Assignment/su-dung-object-voi-Destructuring-Assignment_ukhw1k.png"
              alt="Sử dung object với Destructuring Assignment Javascript">
            <h4 class="text-white bg-secondary p-2 mt-4 shadow title-article-size rounded">
              <b>Giá trị mặc định trong destructuring assignments:</b>
            </h4>
            <p>
              Ví dụ khi chúng ta sử dụng <b>biến nhiều hơn phần tử hiện có trong mảng</b> thì các giá trị biến dư đó sẽ
              có giá trị là <b><code>undefined</code></b>. Để dễ hình dung hơn bạn cùng mình xem ví dụ sau nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let [mau1, mau2] = ["Màu Xanh"];<br/><br/> console.log("Giá trị biến màu 1: " + mau1);<br/> console.log("Giá trị biến màu 2: " + mau2);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589771925/Destructuring%20Assignment/gi-tri-mac-dinh-trong-Destructuring-Assignment_wg6iak.png"
              alt="Giá trị mặc dịnh trong  Destructuring Assignment Javascript">
            <p class="mt-4">
              Thì lúc này chúng ta có thể sử dụng <b>giá trị mặc định</b> để có thể khai báo giá trị cho biến. Bạn xem
              ví
              dụ sau đây để hiểu rõ hơn nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let [mau1, mau2 = "Màu Đỏ"] = ["Màu Xanh"];<br/><br/> console.log("Giá trị biến màu 1: " + mau1);<br/> console.log("Giá trị biến màu 2: " + mau2);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589772067/Destructuring%20Assignment/gi-tri-mac-dinh-2-trong-Destructuring-Assignment_uqpdxv.png"
              alt="Giá trị mặc dịnh 2 trong  Destructuring Assignment Javascript">
            <h4 class="text-white bg-secondary p-2 mt-4 shadow title-article-size rounded">
              <b>Hoán đổi giá trị trong destructuring assignments:</b>
            </h4>
            <p>
              Khi bạn hoán đổi giá trị giữa các biến thì chúng ta có thể sử dụng destructuring assignments để giải quyết
              vấn đề trên.
              Để bạn hiểu rõ hơn chúng ta cùng nhau đi vào tìm hiểu ví dụ sau nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let ten = "Nguyễn";<br/> let ho = "An";<br/> [ten, ho] = [ho, ten]<br/><br/> console.log(ho);<br/> console.log(ten);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589772546/Destructuring%20Assignment/hoan-doi-gia-tri-trong-Destructuring-Assignment_vdhf6a.png"
              alt="Hoán đổi giá trị trong  Destructuring Assignment Javascript">


            <div class="row">
              <div class="col-sm-12 bg-light p-2 mt-4 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size"> Destructuring Assignment Với Đối Tượng(Object):</h3>
              </div>
            </div>
            <p>
              Đối với kiểu dữ liệu <b>object</b> thì chúng ta cũng có thể lấy <b>các giá trị của thuộc tính đối tượng đó
                để gán vào trong biến</b>.
              Cách nó hoạt động thì cũng có nhiều nét tương đồng so với kiểu dữ liệu mảng. Bây giờ chúng ta sẽ đi vào
              cách lấy dữ liệu bằng cách
              thông thường với kiểu dữ liệu <b>object</b> thông qua ví dụ dưới đây nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let khachHang = {<br/> &nbsp;&nbsp; ten: "An",<br/> &nbsp;&nbsp; ho: "Nguyễn"<br/> }<br/> let tenKhachHang = khachHang.ten;<br/> let hoKhachHang = khachHang.ho;<br/><br/> console.log(hoKhachHang);<br/> console.log(tenKhachHang);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589773359/Destructuring%20Assignment/lay-gia-tri-trong-object_fg5viw.png"
              alt="Lấy giá trị trong Object">
            <p class="mt-4">
              Nếu bạn muốn xem lại hoặc tham khảo thêm về object (đối tượng) thì nhấn vào <a
                href="https://www.niemvuilaptrinh.com/article/Object-Trong-Javascript"
                title="object trong javascript">đây nhé</a>.
            </p>
            <p>
              Bây giờ chúng ta sẽ đi vào sử dụng <b>destructuring assignment</b> để lấy giá trị đối với kiểu dữ liệu
              object bằng ví dụ
              dưới đây nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let khachHang = {<br/> &nbsp;&nbsp; ten: "An",<br/> &nbsp;&nbsp; ho: "Nguyễn"<br/> };<br/> let {ten, ho} = khachHang;<br/><br/> console.log(ten);<br/> console.log(ho);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589774030/Destructuring%20Assignment/lay-gia-tri-trong-object-destructuring_assignment_uj1obp.png"
              alt="Lấy giá trị trong Object bằng destructuring assignment js">
            <p class="mt-4">
              Với các giá trị thuộc tính <b><code>ten</code></b> và <b><code>ho</code></b>, dù bạn có chuyển vị trí nó trong
              việc khởi tạo biến
              thì giá trị của nó cũng sẽ <b>không thay đổi</b> nhé.
            </p>
            <p>
              Nếu bạn gán <b>tên biến khác so với tên thuộc tính</b> của đối tượng thì kết quả trả về sẽ như thế nào
              nhỉ?
              <br />
              Để giải quyết vấn đề trên thì bạn thử xem đoạn code sau nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let khachHang = {<br/> &nbsp;&nbsp; ten: "An",<br/> &nbsp;&nbsp; ho: "Nguyễn"<br/> };<br/> let {tenKhachHang, hoKhachHang}= khachHang;<br/><br/> console.log(tenKhachHang);<br/> console.log(hoKhachHang);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589775137/Destructuring%20Assignment/gi-tri-mac-dinh-phan-2-trong-Destructuring-Assignment_alf6uo.png"
              alt="Lấy giá trị trong Object phần 2 bằng destructuring assignment js">
            <p class="mt-4">
              Như bạn thấy thì chúng ta nhận được giá trị của hai biến là <b><code>undefined</code></b>.
            </p>
            <p>
              Nhưng trong <b>destructuring assignment</b> có cung cấp cho chúng ta một cách để xác định tên khác cho
              biến không
              cần tuân theo quy tắc là đặt tên giống với thuộc tính của object. Để hiểu rõ hơn chúng ta cùng nhau đi vào
              ví dụ sau nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let khachHang = {<br/> &nbsp;&nbsp; ten: "An",<br/> &nbsp;&nbsp; ho: "Nguyễn"<br/> };<br/> let {ten: tenKhachHang, ho: hoKhachHang}= khachHang;<br/><br/> console.log(tenKhachHang);<br/> console.log(hoKhachHang);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589775334/Destructuring%20Assignment/gi-tri-mac-dinh-phan-3-trong-Destructuring-Assignment_wibyu4.png"
              alt="Lấy giá trị trong Object phần 3 bằng destructuring assignment js">

            <h4 class="text-white bg-secondary p-2 mt-4 shadow title-article-size rounded">
              <b>Giá trị mặc định trong destructuring assignments với object:</b>
            </h4>
            <p>
              Chúng ta có thể chỉnh sửa giá trị hay thêm mới các thuộc tính trong object nếu như thuộc tính đó không tồn
              tại.
              Để nắm rõ hơn chúng ta cùng nhau đi vào tìm hiểu ví dụ sau nhé:
            </p>

          

            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let khachHang = {<br/> &nbsp;&nbsp; ten: "An",<br/> &nbsp;&nbsp; ho: "Nguyễn"<br/> };<br/> let {ten, ho, tuoi = 18, gioiTinh = "Nam"}= khachHang;<br/><br/> console.log("Tên khách hàng là " + ten);<br/> console.log("Tuổi khách hàng là " + tuoi);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589775906/Destructuring%20Assignment/gia-tri-mac-dinh-trong-object-Destructuring-Assignment_zonuli.png"
              alt="Giá trị mặc định trong object với destructuring assignment js">
              <h4 class="text-white bg-secondary p-2 mt-4 shadow title-article-size rounded">
                <b>Lấy các thuộc tính  trong destructuring assignments với object:</b>
              </h4>

              <p>
                Cũng giống như mảng thì chúng ta có thể sử dụng dấu <b><code>...</code></b> để lấy các thuộc tính trong 
                kiểu dữ liệu object (đối tượng). Để hiểu rõ hơn bạn xem đoạn code sau nhé:
              </p>
              <p>
                <mark class="p-1"><b>Đoạn Code:</b></mark>
              </p>
              <pre><code class="javascript"> let khachHang = {<br/> &nbsp;&nbsp; ten: "An",<br/> &nbsp;&nbsp; ho: "Nguyễn",<br/> &nbsp;&nbsp; tuoi: 18<br/> };<br/> let {ten, ...thongtinKhac}= khachHang;<br/><br/> console.log(ten);<br/> console.log(thongtinKhac);</code></pre>
              <p class="mt-4">
                <mark class="p-1"><b>Kết Quả:</b></mark>
              </p>
              <img class="img-thumbnail img-fluid shadow p-2 lazyload"
                data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589776255/Destructuring%20Assignment/lay-nhieu-thuoc-tinh-trong-object-Destructuring-Assignment_cp1bfb.png"
                alt="Lấy nhiều thuộc tính trong object với destructuring assignment js">
               
                  <h4 class="text-white bg-secondary p-2 mt-4 shadow title-article-size rounded">
                    <b>Lấy các thuộc tính của object lồng nhau trong destructuring assignments:</b>
                  </h4>
    
                  <p>
                    Như bạn biết thì một <b>object</b> có thể chứa được thêm nhiều các object khác. Do đó phần này chúng ta sẽ 
                    đi vào tìm hiểu cách  lấy giá trị thuộc tính của object con đó. Để hiểu rõ hơn bạn xem đoạn code sau nhé:
                  </p>
                  <p>
                    <mark class="p-1"><b>Đoạn Code:</b></mark>
                  </p>
                  <pre><code class="javascript"> let khachHang = {<br/> &nbsp;&nbsp;gioiTinh: "Nam",<br/> &nbsp;&nbsp;tuoi: 18,<br/> &nbsp;&nbsp;hoTen:{<br/> &nbsp;&nbsp;&nbsp;&nbsp; ten: "An",<br/> &nbsp;&nbsp;&nbsp;&nbsp; ho: "Nguyễn",<br/> &nbsp;&nbsp;}<br/> };<br/> let {hoTen: {ten, ho}}= khachHang;<br/><br/> console.log(ten);<br/> console.log(ho);</code></pre>
                  <p class="mt-4">
                    <mark class="p-1"><b>Kết Quả:</b></mark>
                  </p>
                  <img class="img-thumbnail img-fluid shadow p-2 lazyload"
                    data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1589776986/Destructuring%20Assignment/lay-thuoc-tinh-trong-object-con-Destructuring-Assignment_dk5eyi.png"
                    alt="Lấy nhiều thuộc tính trong object con với destructuring assignment js">

























            <h4 class="mt-4"> <b><i class="fa fa-tasks" aria-hidden="true"></i> Tổng kết: </b></h4>


            <p>Qua đây mình mong bài viết sẽ giúp bạn hiểu được <b>khái niệm và cách sử dụng  destructuring assignments</b>
              trong ngôn ngữ
              Javascript và
              nếu có thắc mắc gì cứ gửi email mình sẽ phản hồi sớm nhất có thể. Rất
              mong bạn tiếp tục ủng
              hộ trang web để mình có thể viết nhiều bài hay hơn nữa nhé. Chúc bạn có một ngày vui vẻ!</p>

          </div>
        </article>
      </div>
    </div>




    <div class="mb-5"></div>
  </div>
  <div class="col-lg-12 col-md-12 col-xs-12">
    <div class="mt-5"></div>
    <div class="card card-search">
      <div class="card-header card-header-category">
        Từ Khóa
      </div>
      <div class="card-body card-body-search mt-4">
        <h3 class="button-article"><a href="/article/css"><button type="button"
              class="CSS btn shadow-sm rounded btn-success m-2 pl-3 pr-3">CSS</button></a>
          <a href="/article/html"><button type="button"
              class="HTML btn shadow-sm rounded btn-success m-2 pl-3 pr-3">HTML</button></a>
          <a href="/article/nodejs">
            <button type="button" class="btn shadow-sm rounded btn-success m-2 pl-3 pr-3">NodeJS</button></a>
        </h3>
      </div>
    </div>


  </div>
</div>
</div>

<script src='/javascripts/highlight.pack.js'></script>
<script>
  hljs.initHighlightingOnLoad();
</script>
<script>
  $(document).ready(function () {
    const win = $(window);
    const doc = $(document);
    const progressBar = $('progress');
    const progressLabel = $('.progress-label');
    const setValue = () => win.scrollTop();
    const setMax = () => doc.height() - win.height();
    const setPercent = () => Math.round(win.scrollTop() / (doc.height() - win.height()) * 100);

    progressLabel.text(setPercent() + '%');
    progressBar.attr({
      value: setValue(),
      max: setMax()
    });

    doc.on('scroll', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue()
      });
    });

    win.on('resize', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue(),
        max: setMax()
      });
    })
  });
</script>
<script>
  var container = document.getElementById('content-box');

  $(window).on('load resize', (function () {
    windowsize = $(window).width();

    if ((windowsize <= 992) && (screen.height >= 768)) {
      container.classList.remove('container');
      container.classList.add('container-fluid')

      //navbar
      $('.nav-item').addClass('hvr-underline-from-left')
    } else {
      container.classList.add('container');
      container.classList.remove('container-fluid')

      //navbar
      $('.nav-item').removeClass('hvr-underline-from-left')
    }
  }));
</script>
<script src="/javascripts/lazysizes.min.js" async></script>
<%- include('footer') -%>