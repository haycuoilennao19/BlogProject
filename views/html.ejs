<%- include('header') -%>
<!--Content-->
<div class="jumbotron jumbotron-fluid image-slider">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">
      <div class="content-image">
        <div class="content">
          <blockquote class="blockquote">
            <h1 class="mb-2 content-header">Tôi không có tài năng gì cả. Tôi chỉ đam mê hiểu biết</h1>
            <footer class="blockquote-footer text-right text-white">Albert Einstein</footer>
          </blockquote>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="header-text text-center mt-5 ">
</div>
<div class="container mt-5" id="content-box">
  <div class="row">
    <div class="col-lg-12 col-md-12 col-xs-12">

      <hr />
      <div class="card-text text-justify">
        <article>
          <div class="row">
            <div class="col-sm-12">
              <h2 class="bg-primary mb-4 text-white rounded p-2 shadow title-article-size"><i class="fa fa-cube"
                  aria-hidden="true"></i> Tìm Hiểu Class Trong Javascript</h2>
            </div>
          </div>

          <div class="article-title">
            <div class="progress-wrapper">
              <div class="progress-label"></div><progress></progress>
            </div>
          </div>
          <div class="text-content-article mt-5">
            <p><i>Cũng như các ngôn ngữ khác thì Javascript cần phải được cải tiến để giúp người lập trình
                có thể dễ dàng hiểu và làm việc với nó được tốt hơn. Do đó trong phiên bản ES6 có cung cấp
                cho chúng ta một tiện ích tên là <b>Class</b> giúp hỗ trợ việc lập trình hướng đối tượng trong
                Javascript
                được tốt hơn. Hôm nay bạn hãy cùng mình đi vào tìm hiểu về khái niệm cũng như cách sử dụng class
                trong
                ngôn
                ngữ lập trình Javascript để phát triển web nhé.</i>
            </p>

            <p>
              Như chúng ta đã học ở bài trước thì việc kế thừa trong javascript có thể thực hiện thông qua
              <a href="https://www.niemvuilaptrinh.com/article/Tim-Hieu-Prototype-Trong-Javascript"
                title="kế thừa nguyên mẫu"><b>Prototypal inheritance</b></a>(Kế thừa nguyên mẫu).
              Nhưng đối với các bạn khi học đã học ngôn ngữ khác như Python, Java... thì sẽ hơi khó để có thiểu hiểu
              cách hoạt động của phương thức này. Do đó <b>class</b> được cung cấp để giải quyết vấn đề trên.
              <br />
              Và một vấn đề quan trọng là <b>class</b> trong javascript sẽ không giống như <b>class ở các ngôn ngữ
                khác</b>
              vì cốt lõi của nó được xây dựng dựa trên <b>prototype</b> và <b>constructor function</b> nhưng cách hoạt
              động sẽ gần giống so vói các ngôn ngữ còn lại như kế thừa các phương thức, thuộc tính...
            </p>
            <p>
              Nếu bạn muốn tìm hiểu thêm về lập trình hướng đối tượng thì có thể xem <a
                href="https://vi.wikipedia.org/wiki/L%E1%BA%ADp_tr%C3%ACnh_h%C6%B0%E1%BB%9Bng_%C4%91%E1%BB%91i_t%C6%B0%E1%BB%A3ng"
                title="Lập trình hướng đối tượng">ở đây nhé</a>. Bây giờ chúng ta sẽ cùng nhau đi vào tìm hiểu về nó
              nhé.
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Cú Pháp Class Trong Javascript</h3>
              </div>
            </div>
            <p>
              Bây giờ chúng ta sẽ đi vào tìm hiểu cú pháp của nó nhé:
            </p>
            <pre><code class="javascript"> class (Tên Class){<br/> &nbsp;&nbsp;constructor() {}<br/> &nbsp;&nbsp;Phương thức 1() {} <br/> &nbsp;&nbsp;Phương thức 2() {} <br/> &nbsp;&nbsp;...<br/> }</code></pre>
            <p>
              Chúng ta có thể sử dụng <code>let đối tượng = new (Tên Class)</code> để tạo một object(đối tượng) với các
              phương thức được
              tích hợp sẵn ở trong class đó.
              Và khi một đối tượng được tạo mới từ class bằng từ khóa <code>new</code> thì phương thức
              <code>constructor()</code> sẽ tự động được gọi, với
              tham số được truyền vào trong <code>constructor</code> là các thuộc tính thiết lập cho object đó.
              Bây giờ chúng ta sẽ cùng nhau đi vào ví dụ để dễ hình dung nhé.
            </p>
            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Ví Dụ Class Trong Javascript</h3>
              </div>
            </div>
            <p>
              Bây giờ chúng ta sẽ tạo một class tên là <code>KhachHang</code> dùng để chứa phương thức hiển thị tên
              khách
              hàng ra ngoài màn hình và
              <code>ten</code> là tham số mà chúng ta truyền vào cho <code>constructor</code>. Để hiểu rõ hơn bạn xem
              đoạn code sau nhé:
            </p>

            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> class KhachHang { <br/> &nbsp;&nbsp;constructor(ten) {<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.ten = ten;<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;xinChao() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log("Tên Khách Hàng là " + this.ten);<br/> &nbsp;&nbsp;}<br/> }<br/><br/> /*Tạo object mới từ Class*/<br/> let an = new KhachHang("An");<br/> an.xinChao();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590462728/Class-Trong-Javascript/tao-object-tu-class-js_nys9kr.png"
              alt="Tạo object từ Class trong javascript">

            <p class="mt-4">
              Khi mà <code>new khachHang("An")</code> được gọi thì một object mới sẽ được tạo từ class
              <code>KhachHang</code> và lưu vào trong biến <code>an</code>, sau đó phương thức
              <code>constructor</code>
              sẽ tự động chạy với tham số truyền vào là tên khách hàng dùng để gán giá trị cho thuộc tính
              <code>ten</code> của đối tượng đó.
            </p>
            <p>
              Mình cũng có một số lưu ý khi bạn sử dụng <b>class</b> là:
              <ul>
                <li>
                  <b>Class</b> chỉ chứa định nghĩa phương thức chứ không chứa thuộc tính của đối tượng.
                </li>
                <li>
                  Khi bạn định nghĩa các phương thức trong <b>class</b> thì không sử dấu <b>phẩy(,)</b> để ngăn cách
                  chúng như trong object đâu nhé.
                </li>
                <li>
                  Bạn có thể tham chiếu đến thuộc tính của một object được xây dựng bằng <b>class</b> thông qua
                  cách gọi trực tiếp. (Như ví dụ trên để lấy giá trị tên thì ta có thể gọi <code>an.ten</code> ).
                </li>
              </ul>
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Ví Dụ Constructor Function Trong Javascript</h3>
              </div>
            </div>
            <p>
              Để bạn hiểu được <b>cốt lõi</b> của tiện ích <b>class</b> thì mình sẽ thực hiện kế thừa phương thức như ví
              dụ
              trên nhưng thay vì sử dụng
              <b>class</b> thì sẽ dùng <b>constructor function</b> trong Javascript. Để hiểu rõ hơn bạn xem đoạn code
              sau nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> function KhachHang(ten) {<br/> &nbsp;&nbsp;this.ten = ten;<br/> }<br/> KhachHang.prototype.xinChao = function() {<br/> &nbsp;&nbsp;console.log("Tên Khách Hàng là " + this.ten);<br/> };<br/> let an = new KhachHang("An");<br/> an.xinChao(); </code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590464361/Class-Trong-Javascript/su-dung-prototype-thay-the-class_hxasjl.png"
              alt="Sử dụng prototype thay thế class">
            <p class="mt-4">
              Cách thức hoạt động của <b>constructor function</b> là:
              <ul>
                <li>
                  Nó sẽ tạo một hàm <code>KhachHang</code> như là một constructor function với thuộc tính là
                  <code>ten</code>.
                </li>
                <li>
                  Phương thức <code>xinChao()</code> sẽ được gán vào trong <b>prototype</b> của nó
                  (KhachHang.prototype).
                  Do đó nó có thể sử dụng phương thức cho các đối tượng được tạo bằng <b><code>new
                      KhachHang()</code></b>.
                </li>
              </ul>
            </p>
            <p>
              Để bạn thấy được sự tương đồng thì chúng ta sẽ kiểm tra loại của <b>class</b> bằng lệnh
              <code>typeof()</code> và các
              phương thức trong <b>prototype</b>
              của nó bằng lệnh <code>getOwnPropertyNames()</code> để xem kết quả sao nhé.

            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> class KhachHang { <br/> &nbsp;&nbsp;constructor(ten) {<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.ten = ten;<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;xinChao() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log("Tên Khách Hàng là " + this.ten);<br/> &nbsp;&nbsp;}<br/> }<br/><br/> console.log("Kiểu của class là " + (typeof KhachHang));<br/> console.log("Phương thức trong class là " + Object.getOwnPropertyNames(KhachHang.prototype));</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590466450/Class-Trong-Javascript/kiem-tra-kieu-du-lieu-class_q0ayos.png"
              alt="Kiểm tra kiểu dữ liệu class">
            <p class="mt-4">
              Ở hai ví dụ trên bạn có thể thấy mối quan hệ giữa phương thức <code>xinChao</code> và class
              <code>KhachHang</code> cũng giống như
              mối quan hệ giữa phương thức <code>xinChao</code> và <code>KhachHang.prototype</code>.
            </p>
            <p>
              Do đó chúng ta có thể xem <b>class</b> là <b>syntactic sugar (cú pháp ngọt ngào)</b> của <b>constructor
                function</b>.<br />
              Mình có lưu ý một tý, syntactic sugar là cú pháp được thiết kế để làm mọi thứ trở nên dễ hiểu hơn dựa trên
              những cái có sẵn trong ngôn ngữ lập trình.
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Một Số Điểm Khác Biệt Giữa Class Và Constructor
                  Function</h3>
              </div>
            </div>
            <p>
              Tuy hai cách trên có khá nhiều điểm tương đồng về cách hoạt động nhưng nó cũng có một số điểm khác biệt mà
              bạn cần chú ý là:
              <ul>
                <li>
                  Khi chúng ta tạo mới một đối tượng từ class thì bắt buộc phải sử dụng từ khóa <code>new</code> nếu
                  không thì chương trình sẽ
                  xảy ra lỗi.
                  <img class="img-thumbnail img-fluid shadow p-2 lazyload mt-2"
                    data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590479036/Class-Trong-Javascript/loi-khong-su-tu-koa-new-trong-class_qmh8hf.png"
                    alt="Lỗi không sử dụng từ khóa new trong class">
                </li>
                <li class="mt-2">
                  Tất cả đoạn mã trong class sẽ tự động thực hiện trong <b>strict mode</b>. Bạn có thể tham khảo thêm về
                  <i>strict mode</i> ở
                  <a href="https://www.w3schools.com/js/js_strict.asp" title="strict mode">đây nhé</a>.
                </li>
                <li>
                  Các phương thức trong class là <b>non-enumerable</b>. Nghĩa là các phương thức đó sẽ <b>không hiển thị
                    trong vòng lặp</b>. Bạn có thể tham khảo thêm về tính chất này ở
                  <a href="https://www.niemvuilaptrinh.com/article/Thiet-Lap-Thuoc-Tinh-Object-Trong-Javascript"
                    title="Tính Chất enumerable">đây nhé</a>.
                </li>
                <li>
                  Không giống như hàm bình thường là chúng ta có thể gọi hàm trước rồi mới định nghĩa sau. Thì trong
                  class không cho phép chúng ta
                  làm điều đó. Ví dụ như chúng ta gọi đoạn mã tạo đối tượng <b><code>let an = new
                      KhachHang("An");</code></b> <b>trước khi khai báo class KhachHang</b>
                  thì sẽ xảy ra lỗi.
                  <img class="img-thumbnail img-fluid shadow p-2 lazyload mt-2"
                    data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590480516/Class-Trong-Javascript/loi-khai-bao-trong-class_o9msuc.png"
                    alt="Lỗi khai báo trong class">
                </li>
              </ul>
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 mt-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Class Expression (Biểu Thức Class)</h3>
              </div>
            </div>
            <p>
              Giống như hàm thì class có thể được định nghĩa bên trong một biểu thức khác, hay sử dụng trong một khai
              báo biến
              để chuyển nó vào hàm như là một tham số... Để hiểu rõ hơn bạn xem đoạn code sau nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> let KhachHang = class { <br/> &nbsp;&nbsp;xinChao() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log("Xin chào các bạn");<br/> &nbsp;&nbsp;}<br/> }<br/><br/> /*Tạo object mới từ biến KhachHang*/<br/> let an = new KhachHang();<br/> an.xinChao();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590481528/Class-Trong-Javascript/khai-bao-class-trong-bien_y4ikjh.png"
              alt="Khai báo class trong biến">

            <p class="mt-4">
              Chúng ta cũng có thể <b>khai báo một class và trả nó về từ một hàm</b> trong javascript .
              Để hiểu rõ hơn bạn xem đoạn code sau nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> function TaoClass (ten) { <br/> &nbsp;&nbsp; return class {<br/> &nbsp;&nbsp;&nbsp;&nbsp;xinChao() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log("Xin chào " + ten);<br/> &nbsp;&nbsp;&nbsp;&nbsp;};<br/> &nbsp;&nbsp;};<br/> }<br/><br/> /*Tạo một class mới*/<br/> let KhachHang = TaoClass("Các Bạn");<br/> let khachHang1 = new KhachHang();<br/> khachHang1.xinChao();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590483587/Class-Trong-Javascript/tra-ve-class-tu-ham_fq4xi4.png"
              alt="Trả về Class từ hàm">
            <p class="mt-4">
              Với cách tạo trên thì bạn có thể tùy chỉnh giá trị truyền vào cho phương thức <code>xinChao()</code> ở
              trong class.
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Getter Và Setter</h3>
              </div>
            </div>
            <p>
              Cũng giống như object thì nó cũng có tính chất thuộc tính là <b>get</b> và <b>set</b> dùng để đọc và gán
              giá trị cho thuộc tính. Bạn có thể tham khảo về hai tính chất này ở
              <a href="https://www.niemvuilaptrinh.com/article/Thiet-Lap-Thuoc-Tinh-Object-Trong-Javascript"
                title="Get and Set Trong JS">đây nhé</a>.
              Bây giờ để dễ hình dung thì chúng ta sẽ đi vào ví dụ sau đây:
            </p>




            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> class&nbsp;KhachHang&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;constructor(ho,&nbsp;ten)&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ho&nbsp;=&nbsp;ho;<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ten&nbsp;=&nbsp;ten;<br/> &nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/> &nbsp;&nbsp;&nbsp;&nbsp;/*Lấy&nbsp;giá&nbsp;trị&nbsp;bằng&nbsp;get*/<br/> &nbsp;&nbsp;&nbsp;&nbsp;get&nbsp;hoTen()&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.ho&nbsp;+&nbsp;'&nbsp;'&nbsp;+&nbsp;this.ten;<br/> &nbsp;&nbsp;&nbsp;&nbsp;}<br/> &nbsp;&nbsp;&nbsp;&nbsp;/*Thiết&nbsp;lập&nbsp;giá&nbsp;trị&nbsp;mới&nbsp;bằng&nbsp;set*/<br/> &nbsp;&nbsp;&nbsp;&nbsp;set&nbsp;hoTen(chuoi)&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;hoVaTen&nbsp;=&nbsp;chuoi.split('&nbsp;');<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(hoVaTen.length&nbsp;===&nbsp;2)&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ho&nbsp;=&nbsp;hoVaTen[0];<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ten&nbsp;=&nbsp;hoVaTen[1];<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;'Tên&nbsp;Không&nbsp;Hợp&nbsp;Lệ';<br/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/> &nbsp;&nbsp;&nbsp;&nbsp;}<br/> }<br/><br/> let&nbsp;an&nbsp;=&nbsp;new&nbsp;KhachHang('Nguyễn',&nbsp;'An');<br/> console.log("Lấy giá trị Họ Tên là " + an.hoTen);<br/> <br/> /*Thiết&nbsp;lập&nbsp;tên&nbsp;mới&nbsp;cho&nbsp;đối&nbsp;tượng*/<br/> an.fullName&nbsp;=&nbsp;'Đỗ&nbsp;Lan';<br/> console.log("Thiết lập giá trị mới Họ Tên là " + an.fullName);</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590485003/Class-Trong-Javascript/thuoc-tinh-get-va-set-trong-class_auwunb.png"
              alt="Thuộc tính gat va set trong class">

            <p class="mt-4">
              Chúng ta sẽ khởi tạo một class <code>KhachHang</code> có phương thức <code>hoTen</code> như là một getter
              và setter.<br />
              Với phương thức getter sẽ trả về giá trị của khách hàng bằng việc nối hai tham số là <code>ho</code> và
              <code>ten</code>.
              <br />
              Phương thức setter sẽ xử lý chuỗi được truyền vào và gán hai giá trị được tách từ chuỗi vào cho thuộc tính
              <code>ho</code> và <code>ten</code>.
              Sau đó trả về kết quả họ và tên của khách hàng.
            </p>


            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 mt-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size">Thiết Lập Tên Phương Thức Bằng Dấu <code>[...]</code>
                </h3>
              </div>
            </div>
            <p>
              Bạn có thiết lập tên cho phương thức bằng cách nối các chuỗi lại với nhau thông qua dấu <code>[]</code>.
              Để hiểu rõ hơn bạn xem đoạn code sau nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> class KhachHang { <br/> &nbsp;&nbsp;['xin' + 'Chao']() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log("Xin Chào các bạn");<br/> &nbsp;&nbsp;}<br/> }<br/><br/> /*Tạo object mới từ class*/<br/> let khachHang = new KhachHang();<br/> khachHang.xinChao();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590494285/Class-Trong-Javascript/thiet-lap-ten-phuong-thuc-cho-class_trgrd1.png"
              alt="Thiết lập tên phương thức trong class">


            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 mt-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size"> Kế Thừa Trong Class Bằng extends</code></h3>
              </div>
            </div>
            <p>
              Trước khi ES6 được phát hành thì một trong những cách được sử dụng nhiều nhất để kế thừa
              từ các đối tượng khác là <b>prototypal inheritance</b> (kế thừa nguyên mẫu). Bạn có thể tham
              khảo phương thức này ở <a
                href="https://www.niemvuilaptrinh.com/article/Tim-Hieu-Prototype-Trong-Javascript"
                title="prototypal inheritance">đây nhé</a>.<br />
              Trong phần này thì chúng ta sẽ dùng cách khác đó là sử dụng từ khóa <code>extend</code> để kế thừa phương
              thức, constructor từ các
              class khác.
              Đầu tiên chúng ta sẽ đi vào tạo một class tên là <code>DongVat</code> với các phương thức <code>an</code>,
              <code>ngu</code>:
            </p>
            <h5 class="text-primary">Class Động Vật:</h5>
            <pre><code class="javascript"> class DongVat { <br/> &nbsp;&nbsp;constructor(ten) {<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.ten = ten;<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;an() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang ăn.`);<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;ngu() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang ngủ.`);<br/>  &nbsp;&nbsp;}<br/> } </code></pre>

            <p class="mt-2"></p>Bây giờ chúng ta sẽ tạo một class với tên là <code>meo</code> và nó được kế thừa các
            phương thức từ class
            <code>DongVat</code> bằng cách sử dụng từ khóa <code>extends</code>.</p>
            <h5 class="text-primary">Class Mèo:</h5>
            <pre><code class="javascript"> class Meo extends DongVat {<br/> &nbsp;&nbsp;nhay() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang nhảy.`);<br/> &nbsp;&nbsp;}<br/> }<br/> let meoDen = new Meo("Mèo Đen");<br/> meoDen.ngu();<br/> meoDen.nhay();</code></pre>
            <p class="mt-2">
              <b>Extends</b> (mở rộng) trong trường hợp này bạn có thể hiểu là lớp con sẽ được <b>mở rộng</b> từ lớp cha
              bằng cách tổng hợp các phương thức từ lớp con và lớp cha. <br />
              Và khi bạn muốn kế thừa một phương thức thì có thể thực hiện theo cú pháp sau: <code>class (Lớp Con)
                extends (Lớp Cha)</code>
            </p>
            <p>
              Bây giờ chúng ta sẽ đi kết hợp hai đoạn code trên để xem kết quả sao nhé:
            </p>


            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> class DongVat { <br/> &nbsp;&nbsp;constructor(ten) {<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.ten = ten;<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;an() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang ăn.`);<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;ngu() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang ngủ.`);<br/>  &nbsp;&nbsp;}<br/> }<br/><br/> class Meo extends DongVat {<br/> &nbsp;&nbsp;nhay() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang nhảy.`);<br/> &nbsp;&nbsp;}<br/> }<br/> let meoDen = new Meo("Mèo Đen");<br/> meoDen.ngu(); /*Mèo Đen đang ngủ.*/<br/> meoDen.nhay(); /*Mèo Đen đang nhảy.*/</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590503352/Class-Trong-Javascript/tu-khoa-extends-trong-class_dyfun7.png"
              alt="Từ khóa extends trong class">
            <p class="mt-4">
              Bạn có thể hình dung cách nó chạy như sau:
              <ul>
                <li>
                  Đầu tiên ta sẽ tạo một object là <code>meoDen</code> dựa trên class <code>Meo</code>.
                </li>
                <li>
                  Khi chúng ta gọi các phương thức <code>ngu</code> và <code>nhay</code> của đối tượng, thì trước tiên
                  nó sẽ tìm trong prototype của đối tượng đó là <b>MeoDen.prototype</b> (Chỉ có phương thức
                  <code>nhay</code>).
                </li>
                <li>
                  Sau đó nó truy vấn ngược lên prototype của lớp cha là <code>DongVat.prototype</code>, tìm và trả về
                  phương thức
                  <code>ngu</code> còn thiếu.
                </li>
              </ul>
            </p>

            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size"> Sử Dụng Từ Khóa super Trong Class</code></h3>
              </div>
            </div>
            <p>
              Nếu bạn cần <b>điều chỉnh hay mở rộng</b> hàm của lớp cha nhưng không muốn thay thế nó hoàn toàn thì ta có
              thể sử dụng
              <code>super</code> để giải quyết vấn đề trên. Và nó cũng có thể gọi <code>constructor</code> của lớp cha
              để sử dụng trong lớp con.
              Bây giờ chúng ta sẽ xem cú pháp của nó sau nhé:
              <ul>
                <li><b>super.(Phương thức)(...)</b> dùng để gọi phương thức của lớp cha.</li>
                <li><b>super(...)</b> dùng để gọi constructor của lớp cha.</li>
              </ul>
            </p>

            <h4 class="text-white bg-secondary p-2 shadow title-article-size rounded">
              <b>Gọi phương thức trong lớp cha:</b>
            </h4>
            <p>
              Bây giờ chúng ta sẽ đi vào cách để gọi một phương thức cha trong phương thức con bằng <code>super</code>
              thông qua ví dụ dưới đây nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> class DongVat { <br/> &nbsp;&nbsp;constructor(ten) {<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.ten = ten;<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;an() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang ăn.`);<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;ngu() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang ngủ.`);<br/>  &nbsp;&nbsp;}<br/> }<br/><br/> class Meo extends DongVat {<br/> &nbsp;&nbsp;uong() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang uống.`);<br/> &nbsp;&nbsp;} <br/>&nbsp;&nbsp; an() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;/*Gọi phương thức từ lớp cha*/<br/> &nbsp;&nbsp;&nbsp;&nbsp;super.an();<br/> &nbsp;&nbsp;&nbsp;&nbsp;/*Gọi phương thức trong lớp con*/<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.uong();<br/> &nbsp;&nbsp;}<br/> }<br/> let meoDen = new Meo("Mèo Đen");<br/> meoDen.an();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590506477/Class-Trong-Javascript/goi-phuong-thuc-trong-lop-cha-bang-super_xsuggs.png"
              alt="Gọi Phương thức trong lớp cha bằng super">

            <h4 class="text-white bg-secondary p-2 mt-4 shadow title-article-size rounded">
              <b>Gọi constructor từ lớp cha:</b>
            </h4>
            <p>
              Khi bạn thiết lập lớp con <code>Meo</code> với từ khóa <code>extends</code> thì <b>constructor</b> của nó
              sẽ được thừa hưởng từ lớp cha <code>DongVat</code>
              . Do đó nó không sở hữu <b>constructor</b> riêng cho mình và sẽ được tự động tạo ra như sau:
            </p>
            <pre><code class="javascript"> class Meo extends DongVat {<br/> &nbsp;&nbsp;constructor(...args) {<br/> &nbsp;&nbsp;&nbsp;&nbsp; super(...args);<br/> &nbsp;&nbsp;}<br/> }</code></pre>
            <p class="mt-4">
              Bây giờ chúng ta sẽ đi vào tìm hiểu cách tự tạo một <b>constructor</b> riêng cho class <code>Meo</code>
              bằng cách định nghĩa lại <b>constructor</b> của lớp cha (<code>Animal</code>) thông qua từ khóa
              <code>super</code> nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> class DongVat { <br/> &nbsp;&nbsp;constructor(ten) {<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.ten = ten;<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;an() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang ăn.`);<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;ngu() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang ngủ.`);<br/>  &nbsp;&nbsp;}<br/> }<br/><br/> class Meo extends DongVat {<br/> &nbsp;&nbsp;constructor(ten, mauSac){<br/> &nbsp;&nbsp;&nbsp;&nbsp;/*Thừa hưởng thuộc tính từ lớp cha*/<br/> &nbsp;&nbsp;&nbsp;&nbsp;super(ten);<br/> &nbsp;&nbsp;&nbsp;&nbsp;/*Xác định thuộc tính con*/<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.mauSac = mauSac;<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;uong() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} ${this.mauSac} đang uống nước.`);<br/> &nbsp;&nbsp;} <br/>}<br/> let meoDen = new Meo("Mèo", "Đen");<br/> meoDen.uong();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590547718/Class-Trong-Javascript/thua-ke-constructor-tu-class_lfigu8.png"
              alt="Thừa kế constructor từ class">

            <p class="mt-4">
              Khi bạn sử dụng <code>extends</code> thì class <code>DongVat</code> được gọi là <i>baseclass</i> (Lớp cha)
              và class <code>Meo</code> được gọi là <i>derived class</i> (Lớp con). Javascript sẽ yêu cầu
              <i>derived class</i> (lớp con) muốn sở hữu <b>constructor riêng</b> thì phải gọi <code>super()</code>
              trước khi sử dụng <code>this</code>.
              <br />Để dễ hình dung thì cũng như ví dụ trên mình sẽ bỏ đi <code>super</code> để xem kết quả sao nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> class DongVat { <br/> &nbsp;&nbsp;constructor(ten) {<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.ten = ten;<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;an() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang ăn.`);<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;ngu() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} đang ngủ.`);<br/>  &nbsp;&nbsp;}<br/> }<br/><br/> class Meo extends DongVat {<br/> &nbsp;&nbsp;constructor(ten, mauSac){<br/> &nbsp;&nbsp;&nbsp;&nbsp;/*Sẽ gây ra lỗi khi ta không sử dụng từ khóa super*/<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.ten = ten;<br/> &nbsp;&nbsp;&nbsp;&nbsp;/*Xác định thuộc tính con*/<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.mauSac = mauSac;<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;uong() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.ten} ${this.mauSac} đang uống nước.`);<br/> &nbsp;&nbsp;} <br/>}<br/> let meoDen = new Meo("Mèo", "Đen");<br/> meoDen.uong();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590549599/Class-Trong-Javascript/loi-voi-tu-khoa-super-trong-class_x7i6ie.png"
              alt="Lỗi với từ khóa super trong class">


            <div class="row">
              <div class="col-sm-12 bg-light p-2 mb-4 mt-4 shadow rounded-pill">
                <h3 class="text-primary ml-4 title-article-size"> Static Method (Phương thức tĩnh)</code></h3>
              </div>
            </div>
            <p>
              <b>Static method</b> sẽ được gọi mà không cần phải tạo mới đối tượng từ class đó và nó sẽ không sử dụng
              được khi lớp đó đã khởi tạo. Hay nói một cách dễ hiểu hơn là <b>static method</b> sẽ không có quyền truy
              cập vào
              dữ liệu được lưu trữ trong một đối tượng xác định.
              <br />
              Để dễ hình dung chúng ta sẽ đi vào ví dụ cụ thể sau đây nhé:
            </p>
            <p>
              <mark class="p-1"><b>Đoạn Code:</b></mark>
            </p>
            <pre><code class="javascript"> class KhachHang { <br/> &nbsp;&nbsp;constructor(ten) {<br/> &nbsp;&nbsp;&nbsp;&nbsp;this.ten = ten;<br/> &nbsp;&nbsp;}<br/> &nbsp;&nbsp;static xinChao() {<br/> &nbsp;&nbsp;&nbsp;&nbsp;console.log("Xin Chào Các Bạn!");<br/> &nbsp;&nbsp;}<br/> }<br/><br/> /*Gọi trực tiếp không cần khởi tạo đối tượng*/<br/> KhachHang.xinChao();<br/> /*Không sử dụng được khi lớp đó đã khởi tạo*/<br/> let an = new KhachHang("An");<br/> an.xinChao();</code></pre>
            <p class="mt-4">
              <mark class="p-1"><b>Kết Quả:</b></mark>
            </p>
            <img class="img-thumbnail img-fluid shadow p-2 lazyload"
              data-src="https://res.cloudinary.com/dn4nxz7f0/image/upload/v1590551308/Class-Trong-Javascript/su-dung-method-static-trong-class_msmavs.png"
              alt="Sử dụng method static trong class">



























            <h4 class="mt-4"> <b><i class="fa fa-tasks" aria-hidden="true"></i> Tổng kết: </b></h4>


            <p>Qua đây mình mong bài viết sẽ giúp bạn hiểu được <b>khái niệm cũng như cách sử dụng class</b>
              trong ngôn ngữ
              Javascript và
              nếu có thắc mắc gì cứ gửi email mình sẽ phản hồi sớm nhất có thể. Rất
              mong bạn tiếp tục ủng
              hộ trang web để mình có thể viết nhiều bài hay hơn nữa nhé. Chúc bạn có một ngày vui vẻ!</p>

          </div>
        </article>
      </div>
    </div>




    <div class="mb-5"></div>
  </div>
  <div class="col-lg-12 col-md-12 col-xs-12">
    <div class="mt-5"></div>
    <div class="card card-search">
      <div class="card-header card-header-category">
        Từ Khóa
      </div>
      <div class="card-body card-body-search mt-4">
        <h3 class="button-article"><a href="/article/css"><button type="button"
              class="CSS btn shadow-sm rounded btn-success m-2 pl-3 pr-3">CSS</button></a>
          <a href="/article/html"><button type="button"
              class="HTML btn shadow-sm rounded btn-success m-2 pl-3 pr-3">HTML</button></a>
          <a href="/article/nodejs">
            <button type="button" class="btn shadow-sm rounded btn-success m-2 pl-3 pr-3">NodeJS</button></a>
        </h3>
      </div>
    </div>


  </div>
</div>
</div>

<script src='/javascripts/highlight.pack.js'></script>
<script>
  hljs.initHighlightingOnLoad();
</script>
<script>
  $(document).ready(function () {
    const win = $(window);
    const doc = $(document);
    const progressBar = $('progress');
    const progressLabel = $('.progress-label');
    const setValue = () => win.scrollTop();
    const setMax = () => doc.height() - win.height();
    const setPercent = () => Math.round(win.scrollTop() / (doc.height() - win.height()) * 100);

    progressLabel.text(setPercent() + '%');
    progressBar.attr({
      value: setValue(),
      max: setMax()
    });

    doc.on('scroll', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue()
      });
    });

    win.on('resize', () => {
      progressLabel.text(setPercent() + '%');
      progressBar.attr({
        value: setValue(),
        max: setMax()
      });
    })
  });
</script>
<script>
  var container = document.getElementById('content-box');

  $(window).on('load resize', (function () {
    windowsize = $(window).width();

    if ((windowsize <= 992) && (screen.height >= 768)) {
      container.classList.remove('container');
      container.classList.add('container-fluid')

      //navbar
      $('.nav-item').addClass('hvr-underline-from-left')
    } else {
      container.classList.add('container');
      container.classList.remove('container-fluid')

      //navbar
      $('.nav-item').removeClass('hvr-underline-from-left')
    }
  }));
</script>

<script src="/javascripts/lazysizes.min.js" async></script>
<%- include('footer') -%>